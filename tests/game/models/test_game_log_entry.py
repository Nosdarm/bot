import unittest
import uuid
import time
from typing import Dict, Any, List, Optional

from bot.game.models.game_log_entry import GameLogEntry

class TestGameLogEntry(unittest.TestCase):

    def create_sample_log_data(self) -> Dict[str, Any]:
        return {
            "id": str(uuid.uuid4()),
            "timestamp": time.time(),
            "guild_id": "guild_test_001",
            "event_type": "PLAYER_ACTION",
            "player_id": "player_hero_1",
            "party_id": "party_alpha",
            "location_id": "loc_dark_forest",
            "involved_entities_ids": ["npc_goblin_1", "item_sword_1"],
            "message_key": "player.action.attack",
            "message_params": {"target_id": "npc_goblin_1", "weapon_id": "item_sword_1"},
            "details": {"damage_dealt": 15, "is_critical": False},
            "channel_id": "channel_game_chat_1"
        }

    def test_to_dict_serialization(self):
        log_data = self.create_sample_log_data()
        log_entry = GameLogEntry(
            id=log_data["id"],
            timestamp=log_data["timestamp"],
            guild_id=log_data["guild_id"],
            event_type=log_data["event_type"],
            player_id=log_data["player_id"],
            party_id=log_data["party_id"],
            location_id=log_data["location_id"],
            involved_entities_ids=log_data["involved_entities_ids"],
            message_key=log_data["message_key"],
            message_params=log_data["message_params"],
            details=log_data["details"],
            channel_id=log_data["channel_id"]
        )

        log_dict = log_entry.to_dict()

        # BaseModel's to_dict only includes 'id'. GameLogEntry's to_dict adds the rest.
        expected_dict = {**log_data} # Create a mutable copy

        self.assertEqual(log_dict, expected_dict)

    def test_from_dict_deserialization_full_data(self):
        log_data = self.create_sample_log_data()
        log_entry = GameLogEntry.from_dict(log_data)

        self.assertEqual(log_entry.id, log_data["id"])
        self.assertEqual(log_entry.timestamp, log_data["timestamp"])
        self.assertEqual(log_entry.guild_id, log_data["guild_id"])
        self.assertEqual(log_entry.event_type, log_data["event_type"])
        self.assertEqual(log_entry.player_id, log_data["player_id"])
        self.assertEqual(log_entry.party_id, log_data["party_id"])
        self.assertEqual(log_entry.location_id, log_data["location_id"])
        self.assertEqual(log_entry.involved_entities_ids, log_data["involved_entities_ids"])
        self.assertEqual(log_entry.message_key, log_data["message_key"])
        self.assertEqual(log_entry.message_params, log_data["message_params"])
        self.assertEqual(log_entry.details, log_data["details"])
        self.assertEqual(log_entry.channel_id, log_data["channel_id"])

    def test_from_dict_deserialization_minimal_data_and_defaults(self):
        minimal_data = {
            "guild_id": "guild_test_002",
            "event_type": "SYSTEM_EVENT",
            "details": {"info": "System boot"},
            # id, timestamp, and all Optional fields are missing
        }

        current_time_before_creation = time.time()
        log_entry = GameLogEntry.from_dict(minimal_data)
        current_time_after_creation = time.time()

        self.assertIsNotNone(log_entry.id) # Should be auto-generated by from_dict -> __init__
        self.assertTrue(isinstance(log_entry.id, str))

        # Timestamp should be auto-generated (close to current time)
        self.assertGreaterEqual(log_entry.timestamp, current_time_before_creation)
        self.assertLessEqual(log_entry.timestamp, current_time_after_creation)

        self.assertEqual(log_entry.guild_id, minimal_data["guild_id"])
        self.assertEqual(log_entry.event_type, minimal_data["event_type"])
        self.assertEqual(log_entry.details, minimal_data["details"])

        # Check defaults for Optional fields
        self.assertIsNone(log_entry.player_id)
        self.assertIsNone(log_entry.party_id)
        self.assertIsNone(log_entry.location_id)
        self.assertEqual(log_entry.involved_entities_ids, []) # Default in __init__
        self.assertIsNone(log_entry.message_key)
        self.assertEqual(log_entry.message_params, {}) # Default in __init__
        self.assertIsNone(log_entry.channel_id)

    def test_init_defaults_for_collections_and_id(self):
        # Test that __init__ correctly sets defaults if None is passed for collections
        guild_id = "guild_test_003"
        event_type = "NPC_ACTION"
        details = {"action": "wander"}

        log_entry = GameLogEntry(
            guild_id=guild_id,
            event_type=event_type,
            details=details,
            involved_entities_ids=None, # Explicitly pass None
            message_params=None # Explicitly pass None
            # id and timestamp will be auto-generated
        )

        self.assertIsNotNone(log_entry.id)
        self.assertTrue(isinstance(log_entry.id, str))
        self.assertEqual(log_entry.involved_entities_ids, [])
        self.assertEqual(log_entry.message_params, {})
        self.assertEqual(log_entry.details, details) # Should not be an empty dict

if __name__ == '__main__':
    unittest.main()
