"""Apply schema changes for the Location model.

Revision ID: NEW_LOCATION_REVISION_ID # Replace with actual new revision ID
Revises: PREVIOUS_GUILDCONFIG_REVISION_ID # Replace with the ID of the migration that changed GuildConfig or latest
Create Date: YYYY-MM-DD HH:MM:SS.MS

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import JSONB # For JSONB type

# revision identifiers, used by Alembic.
revision = 'NEW_LOCATION_REVISION_ID' # Replace with actual new revision ID
down_revision = 'PREVIOUS_GUILDCONFIG_REVISION_ID' # Replace with the actual previous revision ID
branch_labels = None
depends_on = None

TABLE_NAME = 'locations'

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. Rename static_name to static_id
    op.alter_column(TABLE_NAME, 'static_name', new_column_name='static_id', existing_type=sa.String())

    # 2. Ensure static_id is indexed (if it wasn't via static_name or needs explicit creation)
    # If static_name was already indexed, this might not be strictly necessary as some DBs rename indexes.
    # However, creating it explicitly ensures it exists with the new name.
    # Drop old index if it exists with the old name and isn't auto-renamed (less common for simple rename)
    # op.drop_index('idx_location_static_name', table_name=TABLE_NAME) # Example if old index was named
    op.create_index('idx_location_static_id', TABLE_NAME, ['static_id'], unique=False)

    # 3. Add UniqueConstraint for (guild_id, static_id)
    op.create_unique_constraint('uq_location_guild_static_id', TABLE_NAME, ['guild_id', 'static_id'])

    # 4. Drop the old exits column
    op.drop_column(TABLE_NAME, 'exits')

    # 5. Drop the old static_connections column
    op.drop_column(TABLE_NAME, 'static_connections')

    # 6. Add the new neighbor_locations_json column
    op.add_column(TABLE_NAME, sa.Column('neighbor_locations_json', JSONB, nullable=True, comment="Stores {target_location_id: 'connection_type_i18n_key'}"))

    # 7. Add the new ai_metadata_json column
    op.add_column(TABLE_NAME, sa.Column('ai_metadata_json', JSONB, nullable=True, comment="Stores metadata for AI generation purposes"))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # 7. Drop the new ai_metadata_json column
    op.drop_column(TABLE_NAME, 'ai_metadata_json')

    # 6. Drop the new neighbor_locations_json column
    op.drop_column(TABLE_NAME, 'neighbor_locations_json')

    # 5. Add back the old static_connections column
    op.add_column(TABLE_NAME, sa.Column('static_connections', JSONB, nullable=True))

    # 4. Add back the old exits column
    op.add_column(TABLE_NAME, sa.Column('exits', JSONB, nullable=True))

    # 3. Drop UniqueConstraint uq_location_guild_static_id
    op.drop_constraint('uq_location_guild_static_id', TABLE_NAME, type_='unique')

    # 2. Drop index on static_id
    op.drop_index('idx_location_static_id', table_name=TABLE_NAME)
    # If static_name had an index previously that should be restored:
    # op.create_index('idx_location_static_name', TABLE_NAME, ['static_name'], unique=False)


    # 1. Rename static_id back to static_name
    op.alter_column(TABLE_NAME, 'static_id', new_column_name='static_name', existing_type=sa.String())

    # ### end Alembic commands ###
