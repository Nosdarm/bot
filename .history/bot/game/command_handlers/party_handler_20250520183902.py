# bot/game/command_handlers/party_handler.py

from __future__ import annotations
# Import necessary types
from typing import Optional, Dict, Any, List, Set, Callable, Awaitable, TYPE_CHECKING, Union
from collections import Counter # Added for example in Party info

# Import discord for embeds if needed
import discord

# Import managers/processors used by party commands (use string literals if they cause cycles)
if TYPE_CHECKING:
    from bot.game.managers.character_manager import CharacterManager
    from bot.game.managers.party_manager import PartyManager
    from bot.game.party_processors.party_action_processor import PartyActionProcessor
    # Add other managers/services needed for party commands (e.g. PartyViewService)
    # from bot.game.party_processors.party_view_service import PartyViewService
    from bot.game.managers.npc_manager import NpcManager # Needed for fallback in info
    # Add any other managers/processors used directly by this handler in __init__ or methods
    # from bot.game.managers.some_other_manager import SomeOtherManager


# Define callback types if needed (can be same as in CommandRouter)
SendToChannelCallback = Callable[..., Awaitable[Any]]


class PartyCommandHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ (–ø–∞—Ç–∏).
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É —Å—É–±–∫–æ–º–∞–Ω–¥ /party.
    """
    def __init__(self,
                 # ƒ∞SPRAVLENIE: Move all non-default arguments to the start
                 character_manager: "CharacterManager",
                 party_manager: "PartyManager",
                 party_action_processor: "PartyActionProcessor",
                 settings: Dict[str, Any], # <-- Moved settings here

                 # ƒ∞SPRAVLENIE: All default arguments follow non-default ones
                 # party_view_service: Optional["PartyViewService"] = None, # Keep Optional and default
                 npc_manager: Optional["NpcManager"] = None, # Keep Optional and default
                 # Add other dependencies here, keeping Optional and default = None
                 # some_other_manager: Optional["SomeOtherManager"] = None,

                ):
        print("Initializing PartyCommandHandler...")
        # Store injected dependencies
        self._char_manager = character_manager
        self._party_manager = party_manager
        self._party_action_processor = party_action_processor
        # self._party_view_service = party_view_service # Store if used
        self._npc_manager = npc_manager # Store if used
        self._settings = settings

        # Get command prefix from settings (needed for usage messages)
        self._command_prefix = self._settings.get('command_prefix', '/')
        if not isinstance(self._command_prefix, str) or not self._command_prefix:
             self._command_prefix = '/'


        print("PartyCommandHandler initialized.")

    # This single method handles the "/party" command and delegates to subcommands
    async def handle(self, message: discord.Message, args: List[str], context: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /party –∏ –µ–µ —Å—É–±–∫–æ–º–∞–Ω–¥—ã.
        –ü–µ—Ä–µ–º–µ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∏–∑ CommandRouter.handle_party.
        """
        send_callback = context['send_to_command_channel']
        guild_id = context.get('guild_id')
        author_id = context.get('author_id')


        if guild_id is None:
            await send_callback("‚ùå –ö–æ–º–∞–Ω–¥—ã –ø–∞—Ä—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            return

        if not args:
             help_message_content = """
–£–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–ø–∞—Ç–∏).
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
`{prefix}party create` - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é (–≤—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º).
`{prefix}party join <ID –ø–∞—Ä—Ç–∏–∏>` - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—Ç–∏–∏.
`{prefix}party leave` - –ü–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞—Ä—Ç–∏—é.
`{prefix}party info [<ID –ø–∞—Ä—Ç–∏–∏>]` - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –ø–∞—Ä—Ç–∏–∏ –∏–ª–∏ –ø–∞—Ä—Ç–∏–∏ –ø–æ ID.
             """.format(prefix=self._command_prefix)

             await send_callback(help_message_content)
             print(f"PartyCommandHandler: Processed party command (help) for guild {guild_id}.")
             return


        subcommand = args[0].lower()
        subcommand_args = args[1:]

        player_char = None
        player_char_id: Optional[str] = None

        author_id_int: Optional[int] = None
        if author_id is not None:
            try: author_id_int = int(author_id)
            except (ValueError, TypeError): pass

        if author_id_int is not None and self._char_manager:
             player_char = self._char_manager.get_character_by_discord_id(guild_id, author_id_int)
             player_char_id = getattr(player_char, 'id', None) if player_char else None


        if subcommand == "create":
             await self._handle_create_subcommand(send_callback, guild_id, author_id, player_char, player_char_id, subcommand_args, context)

        elif subcommand == "join":
             await self._handle_join_subcommand(send_callback, guild_id, author_id, player_char, player_char_id, subcommand_args, context)

        elif subcommand == "leave":
             await self._handle_leave_subcommand(send_callback, guild_id, author_id, player_char, player_char_id, subcommand_args, context)

        elif subcommand == "info":
             await self._handle_info_subcommand(send_callback, guild_id, author_id, player_char, player_char_id, subcommand_args, context)


        else:
            await send_callback(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–∞—Ä—Ç–∏–∏: `{subcommand}`. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: `create`, `join`, `leave`, `info` (–∏ –¥—Ä—É–≥–∏–µ, –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã).\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `{self._command_prefix}party <–¥–µ–π—Å—Ç–≤–∏–µ> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]`".format(prefix=self._command_prefix))
            print(f"PartyCommandHandler: Unknown party subcommand: '{subcommand}' in guild {guild_id}.")


    async def _handle_create_subcommand(self, send_callback: SendToChannelCallback, guild_id: str, author_id: str, player_char: Optional[Any], player_char_id: Optional[str], subcommand_args: List[str], context: Dict[str, Any]) -> None:
        """Handles the '/party create' subcommand logic."""
        print(f"PartyCommandHandler: Handling create subcommand for user {author_id} in guild {guild_id}...")

        if player_char is None:
             await send_callback("‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂.")
             print(f"PartyCommandHandler: Create failed for user {author_id} in guild {guild_id}: No character.")
             return

        if player_char_id is None:
             await send_callback("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
             print(f"PartyCommandHandler Error: Player character object has no ID attribute for user {author_id} in guild {guild_id}.")
             return


        player_current_party = await self._party_manager.get_party_by_member_id(player_char_id, guild_id)
        if player_current_party:
             await send_callback(f"‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä—Ç–∏–∏ (ID `{getattr(player_current_party, 'id', 'N/A')}`). –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ –µ–µ (`{self._command_prefix}party leave`).".format(prefix=self._command_prefix))
             print(f"PartyCommandHandler: Create failed for char {player_char_id} in guild {guild_id}: Already in party {getattr(player_current_party, 'id', 'N/A')}.")
             return

        try:
             new_party_id = await self._party_manager.create_party(
                 leader_id=player_char_id,
                 member_ids=[player_char_id],
                 guild_id=guild_id,
                 **context
             )

             if new_party_id:
                  if self._char_manager and hasattr(self._char_manager, 'set_party_id'):
                      await self._char_manager.set_party_id(
                          guild_id=guild_id,
                          character_id=player_char_id,
                          party_id=new_party_id,
                          **context
                      )

                  await send_callback(f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é! ID –ø–∞—Ä—Ç–∏–∏: `{new_party_id}`")
                  print(f"PartyCommandHandler: Party {new_party_id} created by user {author_id} (char {player_char_id}) in guild {guild_id}.")

             else:
                  await send_callback("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
                  print(f"PartyCommandHandler: party_manager.create_party returned None for user {author_id} (char {player_char_id}) in guild {guild_id}.")

        except Exception as e:
             print(f"PartyCommandHandler Error creating party for user {author_id} (char {player_char_id}) in guild {guild_id}: {e}")
             import traceback
             traceback.print_exc()
             await send_callback(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏: {e}")


    async def _handle_join_subcommand(self, send_callback: SendToChannelCallback, guild_id: str, author_id: str, player_char: Optional[Any], player_char_id: Optional[str], subcommand_args: List[str], context: Dict[str, Any]) -> None:
        """Handles the '/party join <ID>' subcommand logic."""
        print(f"PartyCommandHandler: Handling join subcommand for user {author_id} in guild {guild_id}...")

        if not subcommand_args:
             await send_callback(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `{self._command_prefix}party join <ID –ø–∞—Ä—Ç–∏–∏>`".format(prefix=self._command_prefix))
             return
        if player_char is None:
            await send_callback("‚ùå –î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø–∞—Ä—Ç–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂.")
            print(f"PartyCommandHandler: Join failed for user {author_id} in guild {guild_id}: No character.")
            return
        if player_char_id is None:
             await send_callback("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
             print(f"PartyCommandHandler Error: Player character object has no ID attribute for user {author_id} in guild {guild_id}.")
             return

        target_party_id_arg = subcommand_args[0]

        target_party = self._party_manager.get_party(guild_id, target_party_id_arg)
        if not target_party:
             await send_callback(f"‚ùå –ü–∞—Ä—Ç–∏—è —Å ID `{target_party_id_arg}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏.")
             print(f"PartyCommandHandler: Join failed for char {player_char_id} in guild {guild_id}: Target party {target_party_id_arg} not found.")
             return

        player_current_party = await self._party_manager.get_party_by_member_id(player_char_id, guild_id)
        if player_current_party:
             if getattr(player_current_party, 'id', None) == getattr(target_party, 'id', None):
                  await send_callback(f"‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏ (ID `{target_party_id_arg}`).")
                  print(f"PartyCommandHandler: Join failed for char {player_char_id} in guild {guild_id}: Already in target party {target_party_id_arg}.")
             else:
                  await send_callback(f"‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π –ø–∞—Ä—Ç–∏–∏ (ID `{getattr(player_current_party, 'id', 'N/A')}`). –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ –µ–µ (`{self._command_prefix}party leave`).".format(prefix=self._command_prefix))
                  print(f"PartyCommandHandler: Join failed for char {player_char_id} in guild {guild_id}: Already in different party {getattr(player_current_party, 'id', 'N/A')}.")
             return

        try:
             join_successful = await self._party_action_processor.process_join_party(
                 character_id=player_char_id,
                 party_id=getattr(target_party, 'id'),
                 context=context
             )
             if join_successful:
                  print(f"PartyCommandHandler: Join party action processed successfully in processor for char {player_char_id} to party {getattr(target_party, 'id', 'N/A')} in guild {guild_id}.")
             else:
                  print(f"PartyCommandHandler: Join party action failed in processor for char {player_char_id} to party {getattr(target_party, 'id', 'N/A')} in guild {guild_id}.")

        except Exception as e:
             print(f"PartyCommandHandler Error joining party for char {player_char_id} to party {target_party_id_arg} in guild {guild_id}: {e}")
             import traceback
             traceback.print_exc()
             await send_callback(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ø–∞—Ä—Ç–∏–∏: {e}")


    async def _handle_leave_subcommand(self, send_callback: SendToChannelCallback, guild_id: str, author_id: str, player_char: Optional[Any], player_char_id: Optional[str], subcommand_args: List[str], context: Dict[str, Any]) -> None:
        """Handles the '/party leave' subcommand logic."""
        print(f"PartyCommandHandler: Handling leave subcommand for user {author_id} in guild {guild_id}...")

        if player_char_id is None:
            await send_callback("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å –ø–∞—Ä—Ç–∏—é.")
            print(f"PartyCommandHandler: Leave failed for user {author_id} in guild {guild_id}: No character.")
            return

        player_current_party = await self._party_manager.get_party_by_member_id(player_char_id, guild_id)
        if not player_current_party:
             await send_callback("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä—Ç–∏–∏.")
             print(f"PartyCommandHandler: Leave failed for char {player_char_id} in guild {guild_id}: Not in a party.")
             return

        try:
             party_id_to_leave = getattr(player_current_party, 'id')
             if party_id_to_leave is None:
                  print(f"PartyCommandHandler Error: Player's party object has no ID attribute for char {player_char_id} in guild {guild_id}. Party object: {player_current_party}")
                  await send_callback("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–∞—à–µ–π –ø–∞—Ä—Ç–∏–∏.")
                  return

             leave_successful = await self._party_action_processor.process_leave_party(
                 character_id=player_char_id,
                 party_id=party_id_to_leave,
                 context=context
             )
             if leave_successful:
                  print(f"PartyCommandHandler: Leave party action processed successfully in processor for char {player_char_id} from party {party_id_to_leave} in guild {guild_id}.")
             else:
                  print(f"PartyCommandHandler: Leave party action failed in processor for char {player_char_id} from party {party_id_to_leave} in guild {guild_id}.")

        except Exception as e:
              print(f"PartyCommandHandler Error leaving party for char {player_char_id} from party {getattr(player_current_party, 'id', 'N/A')} in guild {guild_id}: {e}")
              import traceback
              traceback.print_exc()
              await send_callback(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∏–Ω—É—Ç—å –ø–∞—Ä—Ç–∏—é: {e}")


    async def _handle_info_subcommand(self, send_callback: SendToChannelCallback, guild_id: str, author_id: str, player_char: Optional[Any], player_char_id: Optional[str], subcommand_args: List[str], context: Dict[str, Any]) -> None:
        """Handles the '/party info [<ID>]' subcommand logic."""
        print(f"PartyCommandHandler: Handling info subcommand for user {author_id} in guild {guild_id}...")

        target_party: Optional[Any] = None
        party_id_arg: Optional[str] = None

        if subcommand_args:
             party_id_arg = subcommand_args[0]
             target_party = self._party_manager.get_party(guild_id, party_id_arg)

             if not target_party:
                  await send_callback(f"‚ùå –ü–∞—Ä—Ç–∏—è —Å ID `{party_id_arg}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏.")
                  print(f"PartyCommandHandler: Party info failed for user {author_id} in guild {guild_id}: Target party {party_id_arg} not found.")
                  return
        else:
             if player_char_id is None:
                  await send_callback(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –£–∫–∞–∂–∏—Ç–µ ID –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (`{self._command_prefix}party info <ID –ø–∞—Ä—Ç–∏–∏>`).".format(prefix=self._command_prefix))
                  print(f"PartyCommandHandler: Party info failed for user {author_id} in guild {guild_id}: No character and no party ID provided.")
                  return

             target_party = await self._party_manager.get_party_by_member_id(player_char_id, guild_id)
             if not target_party:
                  await send_callback(f"‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä—Ç–∏–∏. –£–∫–∞–∂–∏—Ç–µ ID –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (`{self._command_prefix}party info <ID –ø–∞—Ä—Ç–∏–∏>`).".format(prefix=self._command_prefix))
                  print(f"PartyCommandHandler: Party info failed for char {player_char_id} in guild {guild_id}: Not in a party and no party ID provided.")
                  return
             party_id_arg = getattr(target_party, 'id', 'N/A')


        if target_party is None:
            await send_callback("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
            print(f"PartyCommandHandler Error: target_party is None after lookup logic for user {author_id} in guild {guild_id}.")
            return

        # TODO: Call a PartyViewService method to generate party info embed
        party_view_service = context.get('party_view_service') # Type: Optional["PartyViewService"]

        if party_view_service and hasattr(party_view_service, 'get_party_info_embed'):
             try:
                 party_embed = await party_view_service.get_party_info_embed(target_party, context=context)
                 if party_embed:
                      await send_callback(embed=party_embed)
                      print(f"PartyCommandHandler: Sent party info embed for party {getattr(target_party, 'id', 'N/A')} in guild {guild_id}.")
                 else:
                      print(f"PartyCommandHandler: Failed to generate party info embed for party {getattr(target_party, 'id', 'N/A')} in guild {guild_id}. PartyViewService returned None or invalid.")
                      await send_callback(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–∞—Ä—Ç–∏–∏ **{getattr(target_party, 'name', 'N/A')}**. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞.")

             except Exception as e:
                  print(f"PartyCommandHandler Error generating party info embed for party {getattr(target_party, 'id', 'N/A')} in guild {guild_id}: {e}")
                  import traceback
                  traceback.print_exc()
                  await send_callback(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–∏–∏: {e}")

        else: # Fallback if PartyViewService is not available
             party_id = getattr(target_party, 'id', 'N/A')
             leader_id = getattr(target_party, 'leader_id', 'N/A')
             member_ids = getattr(target_party, 'member_ids', [])
             party_name = getattr(target_party, 'name', '–ë–µ–∑—ã–º—è–Ω–Ω–∞—è –ø–∞—Ä—Ç–∏—è')

             member_names = []
             if isinstance(member_ids, list) and member_ids:
                  char_mgr = self._char_manager # Use injected manager
                  npc_mgr = self._npc_manager # Use injected manager
                  for member_id in member_ids:
                       name = str(member_id)
                       # Pass guild_id to get_character/get_npc
                       if char_mgr and isinstance(member_id, str):
                            char = char_mgr.get_character(guild_id, member_id)
                            if char: name = getattr(char, 'name', name)
                       if name == str(member_id) and npc_mgr and isinstance(member_id, str):
                            npc = npc_mgr.get_npc(guild_id, member_id)
                            if npc: name = getattr(npc, 'name', name)
                       truncated_id = str(member_id)[:6] if isinstance(member_id, (str, int)) else 'N/A'
                       member_names.append(f"`{truncated_id}` ({name})")


             info_message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–∏–∏ **{party_name}** (ID: `{party_id}`).\n"
             truncated_leader_id = str(leader_id)[:6] if isinstance(leader_id, (str, int)) and leader_id is not None else '–ù–µ—Ç'
             info_message += f"–õ–∏–¥–µ—Ä: `{truncated_leader_id}`\n"
             info_message += f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(member_ids)}): " + (", ".join(member_names) if member_names else "–ù–µ—Ç.")

             await send_callback(info_message)
             print(f"PartyCommandHandler: Sent fallback party info for party {party_id} in guild {guild_id}.")
