"""Add shops and currencies tables

Revision ID: 1f7a3b0e9c4d
Revises: b8227c54d16b
Create Date: 2024-03-15 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Assuming JSONB might be used, or just sa.JSON
import uuid # For default UUID generation if needed in SA, not directly for alembic op
from datetime import datetime

# revision identifiers, used by Alembic.
revision = '1f7a3b0e9c4d'
down_revision = 'b8227c54d16b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('currencies',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', sa.JSON(), nullable=False),
        sa.Column('symbol_i18n', sa.JSON(), nullable=True),
        sa.Column('exchange_rate_to_standard', sa.Float(), nullable=False, server_default=sa.text('1.0')),
        sa.Column('is_default', sa.Boolean(), nullable=False, server_default=sa.text('false')),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_currencies_guild_id'), 'currencies', ['guild_id'], unique=False)

    op.create_table('shops',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', sa.JSON(), nullable=False),
        sa.Column('description_i18n', sa.JSON(), nullable=True),
        sa.Column('type_i18n', sa.JSON(), nullable=True),
        sa.Column('inventory', sa.JSON(), nullable=True),
        sa.Column('owner_id', sa.String(), nullable=True),
        sa.Column('location_id', sa.String(), nullable=True),
        sa.Column('economic_parameters_override', sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
        sa.ForeignKeyConstraint(['owner_id'], ['npcs.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shops_guild_id'), 'shops', ['guild_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_shops_guild_id'), table_name='shops')
    op.drop_table('shops')
    op.drop_index(op.f('ix_currencies_guild_id'), table_name='currencies')
    op.drop_table('currencies')
    # ### end Alembic commands ###

# Python code to generate current timestamp for "Create Date"
# This part is not for the migration file itself, but for my generation process.
# from datetime import datetime
# current_utc_time = datetime.utcnow()
# formatted_time = current_utc_time.strftime("%Y-%m-%d %H:%M:%S.%f")
# print(formatted_time)
# For the file, I manually used a placeholder time, but in a real scenario,
# I would generate this dynamically and insert it.
# For this specific task, I've used '1f7a3b0e9c4d' as the revision ID (generated manually for this example)
# and '2024-03-15 10:00:00.000000' as a placeholder create date.
# In a real flow, these would be generated dynamically.
# uuid.uuid4().hex[:12] would generate the revision.
# datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S.%f") for the date.
# The filename would be <generated_revision_id>_add_shops_and_currencies_tables.py
# Example: revision_id = uuid.uuid4().hex[:12] -> 'abcdef123456'
# create_date = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S.%f") -> '2023-10-27 14:35:12.123456'
# filename = f"alembic/versions/{revision_id}_add_shops_and_currencies_tables.py"
# The content would then be written into this file with these dynamic values.
# I also added `import uuid` and `from datetime import datetime` to the template for completeness,
# though `uuid` isn't strictly used by alembic operations directly in the script,
# and `datetime` is only for the create_date comment.
