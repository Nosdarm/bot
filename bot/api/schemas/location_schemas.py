# bot/api/schemas/location_schemas.py
from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any

# Example of a simple reference schema if you want to link to full NPC details elsewhere
# class NPCSimpleRef(BaseModel):
#     id: str
#     name: str # Or name_i18n

class LocationBase(BaseModel):
    name_i18n: Dict[str, str] = Field(default=..., description="Multilingual name of the location", example={"en": "Crossroads", "ru": "Перекресток"})
    descriptions_i18n: Dict[str, str] = Field(default=..., description="Multilingual primary description of the location")
    type_i18n: Dict[str, str] = Field(default=..., description="Multilingual type of the location", example={"en": "Village", "ru": "Деревня"})

    coordinates: Optional[Dict[str, Any]] = Field(default=None, description="Coordinates of the location, e.g., {'x': 10, 'y': 20, 'map_id': 'world'}")
    exits: Optional[Dict[str, str]] = Field(default_factory=dict, description="Exits to other locations, e.g., {'north': 'location_id_2', 'south': 'location_id_3'}")

    npc_ids: Optional[List[str]] = Field(default_factory=list, description="List of NPC IDs present at this location")
    event_triggers: Optional[List[Dict[str, Any]]] = Field(default_factory=list, description="Events that can be triggered at this location") # e.g., [{"event_type": "ambush", "condition": "on_enter"}]

    inventory: Optional[List[Dict[str, Any]]] = Field(default_factory=list, description="List of items at the location, e.g., [{'item_id': 'uuid', 'quantity': 1}] or full item details")
    state_variables: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Dynamic state variables for the location")
    is_active: Optional[bool] = Field(True, description="Is the location currently active/accessible?")

    # Optional detailed i18n fields
    details_i18n: Optional[Dict[str, str]] = Field(None, description="Additional multilingual details about the location")
    tags_i18n: Optional[Dict[str, List[str]]] = Field(None, description="Multilingual tags for the location, e.g., {'en': ['safe', 'market']}") # Tags as list of strings
    atmosphere_i18n: Optional[Dict[str, str]] = Field(None, description="Multilingual description of the location's atmosphere")
    features_i18n: Optional[Dict[str, List[str]]] = Field(None, description="Multilingual list of notable features at the location") # Features as list of strings

    # Other fields from model
    static_name: Optional[str] = Field(None, description="Internal static name or key for the location")
    template_id: Optional[str] = Field(None, description="ID of a template this location is based on, if any")
    channel_id: Optional[str] = Field(None, description="Associated Discord channel ID, if any")
    image_url: Optional[str] = Field(None, description="URL for an image representing the location")


class LocationCreate(LocationBase):
    # guild_id will be from path parameter
    # id will be auto-generated by DB default
    pass


class LocationUpdate(BaseModel): # For partial updates
    name_i18n: Optional[Dict[str, str]] = None
    descriptions_i18n: Optional[Dict[str, str]] = None
    type_i18n: Optional[Dict[str, str]] = None
    coordinates: Optional[Dict[str, Any]] = None
    exits: Optional[Dict[str, str]] = None
    npc_ids: Optional[List[str]] = None
    event_triggers: Optional[List[Dict[str, Any]]] = None
    inventory: Optional[List[Dict[str, Any]]] = None
    state_variables: Optional[Dict[str, Any]] = None
    is_active: Optional[bool] = None
    details_i18n: Optional[Dict[str, str]] = None
    tags_i18n: Optional[Dict[str, List[str]]] = None
    atmosphere_i18n: Optional[Dict[str, str]] = None
    features_i18n: Optional[Dict[str, List[str]]] = None
    static_name: Optional[str] = None
    template_id: Optional[str] = None
    channel_id: Optional[str] = None
    image_url: Optional[str] = None


class LocationResponse(LocationBase):
    id: str = Field(default=..., description="Unique ID of the location")
    guild_id: str = Field(default=..., description="Guild ID this location belongs to")
    # Consider adding resolved NPC names or brief details if needed, instead of just IDs
    # For now, npc_ids: List[str] is inherited from LocationBase.

    class Config:
        orm_mode = True
