"""Add description column to rules_config

Revision ID: 506f4e6c1756
Revises: d9dbc4f4caa8
Create Date: 2025-06-23 19:02:56.469304

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '506f4e6c1756'
down_revision: Union[str, None] = 'd9dbc4f4caa8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_dialogues_guild_id'), table_name='dialogues')
    op.drop_index(op.f('ix_dialogues_is_active'), table_name='dialogues')
    op.drop_table('dialogues')
    op.drop_index(op.f('ix_game_logs_event_type'), table_name='game_logs')
    op.drop_index(op.f('ix_game_logs_guild_id'), table_name='game_logs')
    op.drop_index(op.f('ix_game_logs_location_id'), table_name='game_logs')
    op.drop_index(op.f('ix_game_logs_party_id'), table_name='game_logs')
    op.drop_index(op.f('ix_game_logs_player_id'), table_name='game_logs')
    op.drop_index(op.f('ix_game_logs_timestamp'), table_name='game_logs')
    op.drop_table('game_logs')
    op.drop_constraint(op.f('currencies_guild_id_fkey'), 'currencies', type_='foreignkey')
    op.drop_constraint(op.f('global_npcs_faction_id_fkey'), 'global_npcs', type_='foreignkey')
    op.drop_constraint(op.f('locations_template_id_fkey'), 'locations', type_='foreignkey')
    op.drop_constraint(op.f('npcs_faction_id_fkey'), 'npcs', type_='foreignkey')
    op.drop_constraint(op.f('quests_guild_id_fkey'), 'quests', type_='foreignkey')
    op.drop_constraint(op.f('shops_guild_id_fkey'), 'shops', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key(op.f('shops_guild_id_fkey'), 'shops', 'guild_configs', ['guild_id'], ['guild_id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('quests_guild_id_fkey'), 'quests', 'guild_configs', ['guild_id'], ['guild_id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('npcs_faction_id_fkey'), 'npcs', 'generated_factions', ['faction_id'], ['id'])
    op.create_foreign_key(op.f('locations_template_id_fkey'), 'locations', 'location_templates', ['template_id'], ['id'])
    op.create_foreign_key(op.f('global_npcs_faction_id_fkey'), 'global_npcs', 'generated_factions', ['faction_id'], ['id'])
    op.create_foreign_key(op.f('currencies_guild_id_fkey'), 'currencies', 'guild_configs', ['guild_id'], ['guild_id'], ondelete='CASCADE')
    op.create_table('game_logs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('guild_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('player_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('party_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description_params_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('involved_entities_ids', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='JSON array or object of involved entity IDs, e.g., {"characters": [], "npcs": []}'),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Flexible JSON field for additional structured data about the event'),
    sa.Column('channel_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source_entity_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source_entity_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('target_entity_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('target_entity_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], name=op.f('fk_game_logs_guild_id_guild_configs'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], name=op.f('fk_game_logs_location_id_locations'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['party_id'], ['parties.id'], name=op.f('fk_game_logs_party_id_parties'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name=op.f('fk_game_logs_player_id_players'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('game_logs_pkey'))
    )
    op.create_index(op.f('ix_game_logs_timestamp'), 'game_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_game_logs_player_id'), 'game_logs', ['player_id'], unique=False)
    op.create_index(op.f('ix_game_logs_party_id'), 'game_logs', ['party_id'], unique=False)
    op.create_index(op.f('ix_game_logs_location_id'), 'game_logs', ['location_id'], unique=False)
    op.create_index(op.f('ix_game_logs_guild_id'), 'game_logs', ['guild_id'], unique=False)
    op.create_index(op.f('ix_game_logs_event_type'), 'game_logs', ['event_type'], unique=False)
    op.create_table('dialogues',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('guild_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('participants', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('channel_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('current_stage_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_activity_game_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('event_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], name=op.f('fk_dialogues_guild_id_guild_configs'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('dialogues_pkey'))
    )
    op.create_index(op.f('ix_dialogues_is_active'), 'dialogues', ['is_active'], unique=False)
    op.create_index(op.f('ix_dialogues_guild_id'), 'dialogues', ['guild_id'], unique=False)
    # ### end Alembic commands ###
