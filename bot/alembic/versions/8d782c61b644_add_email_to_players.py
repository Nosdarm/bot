"""add_email_to_players

Revision ID: 8d782c61b644
Revises: b5d85be33b7c
Create Date: 2025-06-20 00:48:19.638288

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8d782c61b644'
down_revision: Union[str, None] = 'b5d85be33b7c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('currencies',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('guild_id', sa.String(), nullable=False),
    sa.Column('name_i18n', sa.JSON(), nullable=False),
    sa.Column('symbol_i18n', sa.JSON(), nullable=True),
    sa.Column('exchange_rate_to_standard', sa.Float(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_currency_guild_id', 'currencies', ['guild_id'], unique=False)
    op.create_index(op.f('ix_currencies_guild_id'), 'currencies', ['guild_id'], unique=False)
    op.create_table('quests',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('guild_id', sa.String(), nullable=False),
    sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('influence_level', sa.String(), nullable=True),
    sa.Column('prerequisites_json_str', sa.Text(), nullable=True),
    sa.Column('connections_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rewards_json_str', sa.Text(), nullable=True),
    sa.Column('npc_involvement_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('consequences_json_str', sa.Text(), nullable=True),
    sa.Column('quest_giver_details_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('consequences_summary_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ai_prompt_context_json_str', sa.Text(), nullable=True),
    sa.Column('is_ai_generated', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_quests_guild_id', 'quests', ['guild_id'], unique=False)
    op.create_index(op.f('ix_quests_guild_id'), 'quests', ['guild_id'], unique=False)
    op.create_table('crafting_recipes',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('guild_id', sa.String(), nullable=False),
    sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ingredients_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('output_item_template_id', sa.String(), nullable=False),
    sa.Column('output_quantity', sa.Integer(), nullable=False),
    sa.Column('required_skill_id', sa.String(), nullable=True),
    sa.Column('required_skill_level', sa.Integer(), nullable=True),
    sa.Column('other_requirements_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ai_metadata_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['output_item_template_id'], ['item_templates.id'], ),
    sa.ForeignKeyConstraint(['required_skill_id'], ['skills.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_craftingrecipe_guild_output_item', 'crafting_recipes', ['guild_id', 'output_item_template_id'], unique=False)
    op.create_index('idx_craftingrecipe_guild_skill', 'crafting_recipes', ['guild_id', 'required_skill_id'], unique=False)
    op.create_index(op.f('ix_crafting_recipes_guild_id'), 'crafting_recipes', ['guild_id'], unique=False)
    op.create_table('shops',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('guild_id', sa.String(), nullable=False),
    sa.Column('name_i18n', sa.JSON(), nullable=False),
    sa.Column('description_i18n', sa.JSON(), nullable=True),
    sa.Column('type_i18n', sa.JSON(), nullable=True),
    sa.Column('inventory', sa.JSON(), nullable=True),
    sa.Column('owner_id', sa.String(), nullable=True),
    sa.Column('location_id', sa.String(), nullable=True),
    sa.Column('economic_parameters_override', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['npcs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_shop_guild_id', 'shops', ['guild_id'], unique=False)
    op.create_index(op.f('ix_shops_guild_id'), 'shops', ['guild_id'], unique=False)
    op.drop_index(op.f('ix_game_logs_guild_id'), table_name='game_logs')
    op.drop_table('game_logs')
    op.drop_index(op.f('idx_generatedfaction_guild_id'), table_name='generated_factions')
    op.drop_index(op.f('ix_generated_factions_guild_id'), table_name='generated_factions')
    op.drop_table('generated_factions')
    op.create_index(op.f('ix_abilities_guild_id'), 'abilities', ['guild_id'], unique=False)
    op.add_column('characters', sa.Column('character_class_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('race_key', sa.String(), nullable=True))
    op.add_column('characters', sa.Column('race_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('unspent_xp', sa.Integer(), nullable=False))
    op.add_column('characters', sa.Column('gold', sa.Integer(), nullable=False))
    op.add_column('characters', sa.Column('mp', sa.Integer(), nullable=True))
    op.add_column('characters', sa.Column('base_attack', sa.Integer(), nullable=True))
    op.add_column('characters', sa.Column('base_defense', sa.Integer(), nullable=True))
    op.add_column('characters', sa.Column('is_alive', sa.Boolean(), nullable=False))
    op.add_column('characters', sa.Column('stats_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('effective_stats_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('status_effects_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('skills_data_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('abilities_data_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('spells_data_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('known_spells_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('spell_cooldowns_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('inventory_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('equipment_slots_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('active_quests_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('flags_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('state_variables_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('current_game_status', sa.String(), nullable=True))
    op.add_column('characters', sa.Column('current_action_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('action_queue_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('collected_actions_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('characters', sa.Column('current_location_id', sa.String(), nullable=True))
    op.add_column('characters', sa.Column('current_party_id', sa.String(), nullable=True))
    op.drop_index(op.f('ix_characters_is_active_char'), table_name='characters')
    op.create_index('idx_character_location', 'characters', ['current_location_id'], unique=False)
    op.create_index('idx_character_party', 'characters', ['current_party_id'], unique=False)
    op.create_index(op.f('ix_characters_current_location_id'), 'characters', ['current_location_id'], unique=False)
    op.create_index(op.f('ix_characters_current_party_id'), 'characters', ['current_party_id'], unique=False)
    op.create_foreign_key('fk_character_current_party', 'characters', 'parties', ['current_party_id'], ['id'])
    op.create_foreign_key(None, 'characters', 'locations', ['current_location_id'], ['id'])
    op.drop_column('characters', 'is_active_char')
    op.drop_column('characters', 'inventory')
    op.drop_column('characters', 'stats')
    op.drop_column('characters', 'npc_relationships')
    op.drop_column('characters', 'class_i18n')
    op.drop_column('characters', 'abilities')
    op.create_index(op.f('ix_crafting_queues_guild_id'), 'crafting_queues', ['guild_id'], unique=False)
    op.create_index(op.f('ix_generated_locations_guild_id'), 'generated_locations', ['guild_id'], unique=False)
    op.create_index(op.f('ix_generated_npcs_guild_id'), 'generated_npcs', ['guild_id'], unique=False)
    op.add_column('generated_quests', sa.Column('title_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('generated_quests', sa.Column('status', sa.String(), nullable=True))
    op.add_column('generated_quests', sa.Column('suggested_level', sa.Integer(), nullable=True))
    op.add_column('generated_quests', sa.Column('rewards_json', sa.Text(), nullable=True))
    op.add_column('generated_quests', sa.Column('prerequisites_json', sa.Text(), nullable=True))
    op.add_column('generated_quests', sa.Column('consequences_json', sa.Text(), nullable=True))
    op.add_column('generated_quests', sa.Column('quest_giver_npc_id', sa.String(), nullable=True))
    op.add_column('generated_quests', sa.Column('ai_prompt_context_json', sa.Text(), nullable=True))
    op.add_column('generated_quests', sa.Column('quest_giver_details_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('generated_quests', sa.Column('consequences_summary_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('generated_quests', 'description_i18n',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_foreign_key(None, 'generated_quests', 'guild_configs', ['guild_id'], ['guild_id'], ondelete='CASCADE')
    op.drop_column('generated_quests', 'name_i18n')
    op.create_index(op.f('ix_global_npcs_faction_id'), 'global_npcs', ['faction_id'], unique=False)
    op.create_index(op.f('ix_global_npcs_guild_id'), 'global_npcs', ['guild_id'], unique=False)
    op.create_index(op.f('ix_global_npcs_is_active'), 'global_npcs', ['is_active'], unique=False)
    op.add_column('guild_configs', sa.Column('system_channel_id', sa.String(), nullable=True))
    op.add_column('guild_configs', sa.Column('notification_channel_id', sa.String(), nullable=True))
    op.drop_index(op.f('ix_guild_configs_master_role_id'), table_name='guild_configs')
    op.drop_constraint(op.f('uq_guild_configs_guild_id'), 'guild_configs', type_='unique')
    op.drop_column('guild_configs', 'id')
    op.drop_column('guild_configs', 'master_role_id')
    op.drop_column('guild_configs', 'system_notifications_channel_id')
    op.create_index(op.f('ix_inventory_guild_id'), 'inventory', ['guild_id'], unique=False)
    op.create_index(op.f('ix_inventory_player_id'), 'inventory', ['player_id'], unique=False)
    op.create_index(op.f('ix_item_properties_guild_id'), 'item_properties', ['guild_id'], unique=False)
    op.create_index(op.f('ix_item_templates_guild_id'), 'item_templates', ['guild_id'], unique=False)
    op.create_index(op.f('ix_items_guild_id'), 'items', ['guild_id'], unique=False)
    op.add_column('location_templates', sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_column('location_templates', 'description')
    op.add_column('locations', sa.Column('static_id', sa.String(), nullable=True))
    op.add_column('locations', sa.Column('neighbor_locations_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Stores a list of connection objects, e.g., [{'to_location_id': 'id1', 'path_description_i18n': {'en': 'a path'}, 'travel_time_hours': 1}]"))
    op.add_column('locations', sa.Column('ai_metadata_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Stores metadata for AI generation purposes'))
    op.add_column('locations', sa.Column('on_enter_events_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.create_index(op.f('ix_locations_static_id'), 'locations', ['static_id'], unique=False)
    op.create_unique_constraint('uq_location_guild_static_id', 'locations', ['guild_id', 'static_id'])
    op.drop_column('locations', 'static_name')
    op.drop_column('locations', 'exits')
    op.drop_column('locations', 'static_connections')
    op.create_index(op.f('ix_mobile_groups_is_active'), 'mobile_groups', ['is_active'], unique=False)
    op.drop_index(op.f('idx_npc_faction_id'), table_name='npcs')
    op.create_index(op.f('ix_npcs_faction_id'), 'npcs', ['faction_id'], unique=False)
    op.add_column('parties', sa.Column('player_ids_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_constraint(op.f('fk_parties_leader_id'), 'parties', type_='foreignkey')
    op.create_foreign_key('fk_party_leader_character', 'parties', 'characters', ['leader_id'], ['id'])
    op.drop_column('parties', 'player_ids')
    op.add_column('pending_generations', sa.Column('moderator_notes_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('pending_generations', 'request_type',
               existing_type=postgresql.ENUM('LOCATION_DESCRIPTION', 'LOCATION_DETAILS', 'NPC_PROFILE', 'QUEST_IDEATION', 'QUEST_FULL', 'ITEM_PROFILE', 'FACTION_PROFILE', 'LORE_ENTRY', 'DIALOGUE_LINE', 'EVENT_DESCRIPTION', 'CUSTOM_PROMPT', name='generation_type_enum'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('pending_generations', 'status',
               existing_type=postgresql.ENUM('PENDING_GENERATION', 'PENDING_VALIDATION', 'FAILED_VALIDATION', 'PENDING_MODERATION', 'APPROVED', 'REJECTED', 'APPLIED', 'APPLICATION_FAILED', 'ARCHIVED', name='pending_status_enum'),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index(op.f('idx_pending_generation_guild_status_type'), table_name='pending_generations')
    op.drop_index(op.f('ix_pending_generations_created_by_user_id'), table_name='pending_generations')
    op.create_index('idx_pendinggeneration_guild_status', 'pending_generations', ['guild_id', 'status'], unique=False)
    op.drop_column('pending_generations', 'moderator_notes')
    op.add_column('player_npc_memory', sa.Column('character_id', sa.String(), nullable=False))
    op.drop_index(op.f('idx_playernpcmemory_guild_player_npc'), table_name='player_npc_memory')
    op.drop_index(op.f('idx_playernpcmemory_player_id'), table_name='player_npc_memory')
    op.create_index('idx_playernpcmemory_character_id', 'player_npc_memory', ['character_id'], unique=False)
    op.create_index('idx_playernpcmemory_guild_char_npc', 'player_npc_memory', ['guild_id', 'character_id', 'npc_id'], unique=False)
    op.create_index(op.f('ix_player_npc_memory_character_id'), 'player_npc_memory', ['character_id'], unique=False)
    op.create_index(op.f('ix_player_npc_memory_npc_id'), 'player_npc_memory', ['npc_id'], unique=False)
    op.drop_constraint(op.f('player_npc_memory_player_id_fkey'), 'player_npc_memory', type_='foreignkey')
    op.drop_constraint(op.f('player_npc_memory_npc_id_fkey'), 'player_npc_memory', type_='foreignkey')
    op.create_foreign_key(None, 'player_npc_memory', 'characters', ['character_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'player_npc_memory', 'npcs', ['npc_id'], ['id'], ondelete='CASCADE')
    op.drop_column('player_npc_memory', 'player_id')
    op.add_column('players', sa.Column('active_character_id', sa.String(), nullable=True))
    op.alter_column('players', 'discord_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_index('idx_player_guild_discord', 'players', ['guild_id', 'discord_id'], unique=False)
    op.create_index(op.f('ix_players_active_character_id'), 'players', ['active_character_id'], unique=False)
    op.create_index(op.f('ix_players_discord_id'), 'players', ['discord_id'], unique=False)
    op.create_index(op.f('ix_players_guild_id'), 'players', ['guild_id'], unique=False)
    op.drop_constraint(op.f('fk_players_current_party_id'), 'players', type_='foreignkey')
    op.drop_constraint(op.f('players_current_location_id_fkey'), 'players', type_='foreignkey')
    op.drop_constraint(op.f('fk_players_party_id'), 'players', type_='foreignkey')
    op.create_foreign_key('fk_player_active_character', 'players', 'characters', ['active_character_id'], ['id'], ondelete='SET NULL', use_alter=True)
    op.drop_column('players', 'unspent_xp')
    op.drop_column('players', 'defense')
    op.drop_column('players', 'stats')
    op.drop_column('players', 'flags_json')
    op.drop_column('players', 'spell_cooldowns')
    op.drop_column('players', 'current_location_id')
    op.drop_column('players', 'mp')
    op.drop_column('players', 'active_quests')
    op.drop_column('players', 'xp')
    op.drop_column('players', 'known_spells')
    op.drop_column('players', 'attack')
    op.drop_column('players', 'level')
    op.drop_column('players', 'inventory')
    op.drop_column('players', 'effective_stats_json')
    op.drop_column('players', 'gold')
    op.drop_column('players', 'current_game_status')
    op.drop_column('players', 'spells_data_json')
    op.drop_column('players', 'current_party_id')
    op.drop_column('players', 'max_health')
    op.drop_column('players', 'is_alive')
    op.drop_column('players', 'character_class')
    op.drop_column('players', 'current_action')
    op.drop_column('players', 'party_id')
    op.drop_column('players', 'status_effects')
    op.drop_column('players', 'action_queue')
    op.drop_column('players', 'hp')
    op.drop_column('players', 'skills_data_json')
    op.drop_column('players', 'race')
    op.drop_column('players', 'abilities_data_json')
    op.drop_column('players', 'collected_actions_json')
    op.drop_column('players', 'state_variables')
    op.add_column('quest_steps', sa.Column('title_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('quest_steps', sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('quest_steps', sa.Column('requirements_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('quest_steps', sa.Column('required_mechanics_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('quest_steps', sa.Column('abstract_goal_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('quest_steps', sa.Column('conditions_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('quest_steps', sa.Column('consequences_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('quest_steps', sa.Column('step_order', sa.Integer(), nullable=False))
    op.add_column('quest_steps', sa.Column('status', sa.String(), nullable=False))
    op.add_column('quest_steps', sa.Column('assignee_type', sa.String(), nullable=True))
    op.add_column('quest_steps', sa.Column('assignee_id', sa.String(), nullable=True))
    op.add_column('quest_steps', sa.Column('linked_location_id', sa.String(), nullable=True))
    op.add_column('quest_steps', sa.Column('linked_npc_id', sa.String(), nullable=True))
    op.add_column('quest_steps', sa.Column('linked_item_id', sa.String(), nullable=True))
    op.add_column('quest_steps', sa.Column('linked_guild_event_id', sa.String(), nullable=True))
    op.alter_column('quest_steps', 'quest_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index(op.f('idx_queststep_guild_questline'), table_name='quest_steps')
    op.create_index('idx_queststep_guild_quest', 'quest_steps', ['guild_id', 'quest_id'], unique=False)
    op.drop_constraint(op.f('quest_steps_questline_id_fkey'), 'quest_steps', type_='foreignkey')
    op.create_foreign_key(None, 'quest_steps', 'npcs', ['linked_npc_id'], ['id'])
    op.create_foreign_key(None, 'quest_steps', 'locations', ['linked_location_id'], ['id'])
    op.create_foreign_key(None, 'quest_steps', 'events', ['linked_guild_event_id'], ['id'])
    op.create_foreign_key(None, 'quest_steps', 'items', ['linked_item_id'], ['id'])
    op.drop_column('quest_steps', 'step_details_i18n')
    op.drop_column('quest_steps', 'questline_id')
    op.alter_column('questlines', 'name_i18n',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_index(op.f('ix_questlines_guild_id'), 'questlines', ['guild_id'], unique=False)
    op.create_index(op.f('ix_skills_guild_id'), 'skills', ['guild_id'], unique=False)
    op.drop_constraint(op.f('fk_user_settings_user_id_players'), 'user_settings', type_='foreignkey')
    op.create_foreign_key(None, 'user_settings', 'players', ['user_id'], ['discord_id'])
    op.drop_constraint(op.f('uq_world_states_guild_id'), 'world_states', type_='unique')
    op.drop_index(op.f('ix_world_states_guild_id'), table_name='world_states')
    op.create_index(op.f('ix_world_states_guild_id'), 'world_states', ['guild_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_world_states_guild_id'), table_name='world_states')
    op.create_index(op.f('ix_world_states_guild_id'), 'world_states', ['guild_id'], unique=False)
    op.create_unique_constraint(op.f('uq_world_states_guild_id'), 'world_states', ['guild_id'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'user_settings', type_='foreignkey')
    op.create_foreign_key(op.f('fk_user_settings_user_id_players'), 'user_settings', 'players', ['user_id'], ['id'])
    op.drop_index(op.f('ix_skills_guild_id'), table_name='skills')
    op.drop_index(op.f('ix_questlines_guild_id'), table_name='questlines')
    op.alter_column('questlines', 'name_i18n',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.add_column('quest_steps', sa.Column('questline_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('quest_steps', sa.Column('step_details_i18n', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'quest_steps', type_='foreignkey')
    op.drop_constraint(None, 'quest_steps', type_='foreignkey')
    op.drop_constraint(None, 'quest_steps', type_='foreignkey')
    op.drop_constraint(None, 'quest_steps', type_='foreignkey')
    op.create_foreign_key(op.f('quest_steps_questline_id_fkey'), 'quest_steps', 'questlines', ['questline_id'], ['id'])
    op.drop_index('idx_queststep_guild_quest', table_name='quest_steps')
    op.create_index(op.f('idx_queststep_guild_questline'), 'quest_steps', ['guild_id', 'questline_id'], unique=False)
    op.alter_column('quest_steps', 'quest_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('quest_steps', 'linked_guild_event_id')
    op.drop_column('quest_steps', 'linked_item_id')
    op.drop_column('quest_steps', 'linked_npc_id')
    op.drop_column('quest_steps', 'linked_location_id')
    op.drop_column('quest_steps', 'assignee_id')
    op.drop_column('quest_steps', 'assignee_type')
    op.drop_column('quest_steps', 'status')
    op.drop_column('quest_steps', 'step_order')
    op.drop_column('quest_steps', 'consequences_json')
    op.drop_column('quest_steps', 'conditions_json')
    op.drop_column('quest_steps', 'abstract_goal_json')
    op.drop_column('quest_steps', 'required_mechanics_json')
    op.drop_column('quest_steps', 'requirements_i18n')
    op.drop_column('quest_steps', 'description_i18n')
    op.drop_column('quest_steps', 'title_i18n')
    op.add_column('players', sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('collected_actions_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('abilities_data_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('race', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('skills_data_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('hp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('action_queue', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('status_effects', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('party_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('current_action', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('character_class', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('is_alive', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('max_health', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('current_party_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('spells_data_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('current_game_status', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('gold', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('effective_stats_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('inventory', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('attack', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('known_spells', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('xp', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('active_quests', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('mp', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('current_location_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('spell_cooldowns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('flags_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('defense', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('unspent_xp', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint('fk_player_active_character', 'players', type_='foreignkey')
    op.create_foreign_key(op.f('fk_players_party_id'), 'players', 'parties', ['party_id'], ['id'])
    op.create_foreign_key(op.f('players_current_location_id_fkey'), 'players', 'locations', ['current_location_id'], ['id'])
    op.create_foreign_key(op.f('fk_players_current_party_id'), 'players', 'parties', ['current_party_id'], ['id'])
    op.drop_index(op.f('ix_players_guild_id'), table_name='players')
    op.drop_index(op.f('ix_players_discord_id'), table_name='players')
    op.drop_index(op.f('ix_players_active_character_id'), table_name='players')
    op.drop_index('idx_player_guild_discord', table_name='players')
    op.alter_column('players', 'discord_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('players', 'active_character_id')
    op.add_column('player_npc_memory', sa.Column('player_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'player_npc_memory', type_='foreignkey')
    op.drop_constraint(None, 'player_npc_memory', type_='foreignkey')
    op.create_foreign_key(op.f('player_npc_memory_npc_id_fkey'), 'player_npc_memory', 'npcs', ['npc_id'], ['id'])
    op.create_foreign_key(op.f('player_npc_memory_player_id_fkey'), 'player_npc_memory', 'players', ['player_id'], ['id'])
    op.drop_index(op.f('ix_player_npc_memory_npc_id'), table_name='player_npc_memory')
    op.drop_index(op.f('ix_player_npc_memory_character_id'), table_name='player_npc_memory')
    op.drop_index('idx_playernpcmemory_guild_char_npc', table_name='player_npc_memory')
    op.drop_index('idx_playernpcmemory_character_id', table_name='player_npc_memory')
    op.create_index(op.f('idx_playernpcmemory_player_id'), 'player_npc_memory', ['player_id'], unique=False)
    op.create_index(op.f('idx_playernpcmemory_guild_player_npc'), 'player_npc_memory', ['guild_id', 'player_id', 'npc_id'], unique=False)
    op.drop_column('player_npc_memory', 'character_id')
    op.add_column('pending_generations', sa.Column('moderator_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index('idx_pendinggeneration_guild_status', table_name='pending_generations')
    op.create_index(op.f('ix_pending_generations_created_by_user_id'), 'pending_generations', ['created_by_user_id'], unique=False)
    op.create_index(op.f('idx_pending_generation_guild_status_type'), 'pending_generations', ['guild_id', 'status', 'request_type'], unique=False)
    op.alter_column('pending_generations', 'status',
               existing_type=sa.String(),
               type_=postgresql.ENUM('PENDING_GENERATION', 'PENDING_VALIDATION', 'FAILED_VALIDATION', 'PENDING_MODERATION', 'APPROVED', 'REJECTED', 'APPLIED', 'APPLICATION_FAILED', 'ARCHIVED', name='pending_status_enum'),
               existing_nullable=False)
    op.alter_column('pending_generations', 'request_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('LOCATION_DESCRIPTION', 'LOCATION_DETAILS', 'NPC_PROFILE', 'QUEST_IDEATION', 'QUEST_FULL', 'ITEM_PROFILE', 'FACTION_PROFILE', 'LORE_ENTRY', 'DIALOGUE_LINE', 'EVENT_DESCRIPTION', 'CUSTOM_PROMPT', name='generation_type_enum'),
               existing_nullable=False)
    op.drop_column('pending_generations', 'moderator_notes_i18n')
    op.add_column('parties', sa.Column('player_ids', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint('fk_party_leader_character', 'parties', type_='foreignkey')
    op.create_foreign_key(op.f('fk_parties_leader_id'), 'parties', 'players', ['leader_id'], ['id'])
    op.drop_column('parties', 'player_ids_json')
    op.drop_index(op.f('ix_npcs_faction_id'), table_name='npcs')
    op.create_index(op.f('idx_npc_faction_id'), 'npcs', ['faction_id'], unique=False)
    op.drop_index(op.f('ix_mobile_groups_is_active'), table_name='mobile_groups')
    op.add_column('locations', sa.Column('static_connections', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('exits', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('static_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint('uq_location_guild_static_id', 'locations', type_='unique')
    op.drop_index(op.f('ix_locations_static_id'), table_name='locations')
    op.drop_column('locations', 'on_enter_events_json')
    op.drop_column('locations', 'ai_metadata_json')
    op.drop_column('locations', 'neighbor_locations_json')
    op.drop_column('locations', 'static_id')
    op.add_column('location_templates', sa.Column('description', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_column('location_templates', 'description_i18n')
    op.drop_index(op.f('ix_items_guild_id'), table_name='items')
    op.drop_index(op.f('ix_item_templates_guild_id'), table_name='item_templates')
    op.drop_index(op.f('ix_item_properties_guild_id'), table_name='item_properties')
    op.drop_index(op.f('ix_inventory_player_id'), table_name='inventory')
    op.drop_index(op.f('ix_inventory_guild_id'), table_name='inventory')
    op.add_column('guild_configs', sa.Column('system_notifications_channel_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('guild_configs', sa.Column('master_role_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('guild_configs', sa.Column('id', sa.VARCHAR(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False))
    op.create_unique_constraint(op.f('uq_guild_configs_guild_id'), 'guild_configs', ['guild_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_guild_configs_master_role_id'), 'guild_configs', ['master_role_id'], unique=False)
    op.drop_column('guild_configs', 'notification_channel_id')
    op.drop_column('guild_configs', 'system_channel_id')
    op.drop_index(op.f('ix_global_npcs_is_active'), table_name='global_npcs')
    op.drop_index(op.f('ix_global_npcs_guild_id'), table_name='global_npcs')
    op.drop_index(op.f('ix_global_npcs_faction_id'), table_name='global_npcs')
    op.add_column('generated_quests', sa.Column('name_i18n', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'generated_quests', type_='foreignkey')
    op.alter_column('generated_quests', 'description_i18n',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_column('generated_quests', 'consequences_summary_i18n')
    op.drop_column('generated_quests', 'quest_giver_details_i18n')
    op.drop_column('generated_quests', 'ai_prompt_context_json')
    op.drop_column('generated_quests', 'quest_giver_npc_id')
    op.drop_column('generated_quests', 'consequences_json')
    op.drop_column('generated_quests', 'prerequisites_json')
    op.drop_column('generated_quests', 'rewards_json')
    op.drop_column('generated_quests', 'suggested_level')
    op.drop_column('generated_quests', 'status')
    op.drop_column('generated_quests', 'title_i18n')
    op.drop_index(op.f('ix_generated_npcs_guild_id'), table_name='generated_npcs')
    op.drop_index(op.f('ix_generated_locations_guild_id'), table_name='generated_locations')
    op.drop_index(op.f('ix_crafting_queues_guild_id'), table_name='crafting_queues')
    op.add_column('characters', sa.Column('abilities', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('characters', sa.Column('class_i18n', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('characters', sa.Column('npc_relationships', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('characters', sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('characters', sa.Column('inventory', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('characters', sa.Column('is_active_char', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'characters', type_='foreignkey')
    op.drop_constraint('fk_character_current_party', 'characters', type_='foreignkey')
    op.drop_index(op.f('ix_characters_current_party_id'), table_name='characters')
    op.drop_index(op.f('ix_characters_current_location_id'), table_name='characters')
    op.drop_index('idx_character_party', table_name='characters')
    op.drop_index('idx_character_location', table_name='characters')
    op.create_index(op.f('ix_characters_is_active_char'), 'characters', ['is_active_char'], unique=False)
    op.drop_column('characters', 'current_party_id')
    op.drop_column('characters', 'current_location_id')
    op.drop_column('characters', 'collected_actions_json')
    op.drop_column('characters', 'action_queue_json')
    op.drop_column('characters', 'current_action_json')
    op.drop_column('characters', 'current_game_status')
    op.drop_column('characters', 'state_variables_json')
    op.drop_column('characters', 'flags_json')
    op.drop_column('characters', 'active_quests_json')
    op.drop_column('characters', 'equipment_slots_json')
    op.drop_column('characters', 'inventory_json')
    op.drop_column('characters', 'spell_cooldowns_json')
    op.drop_column('characters', 'known_spells_json')
    op.drop_column('characters', 'spells_data_json')
    op.drop_column('characters', 'abilities_data_json')
    op.drop_column('characters', 'skills_data_json')
    op.drop_column('characters', 'status_effects_json')
    op.drop_column('characters', 'effective_stats_json')
    op.drop_column('characters', 'stats_json')
    op.drop_column('characters', 'is_alive')
    op.drop_column('characters', 'base_defense')
    op.drop_column('characters', 'base_attack')
    op.drop_column('characters', 'mp')
    op.drop_column('characters', 'gold')
    op.drop_column('characters', 'unspent_xp')
    op.drop_column('characters', 'race_i18n')
    op.drop_column('characters', 'race_key')
    op.drop_column('characters', 'character_class_i18n')
    op.drop_index(op.f('ix_abilities_guild_id'), table_name='abilities')
    op.create_table('generated_factions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('guild_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], name=op.f('fk_generated_factions_guild_id_guild_configs'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('generated_factions_pkey'))
    )
    op.create_index(op.f('ix_generated_factions_guild_id'), 'generated_factions', ['guild_id'], unique=False)
    op.create_index(op.f('idx_generatedfaction_guild_id'), 'generated_factions', ['guild_id'], unique=False)
    op.create_table('game_logs',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('guild_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('player_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('party_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message_key', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('message_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('location_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('involved_entities_ids', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('consequences_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('channel_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], name=op.f('fk_game_logs_guild_id_guild_configs'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], name=op.f('game_logs_location_id_fkey')),
    sa.ForeignKeyConstraint(['party_id'], ['parties.id'], name=op.f('game_logs_party_id_fkey')),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name=op.f('game_logs_player_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('game_logs_pkey'))
    )
    op.create_index(op.f('ix_game_logs_guild_id'), 'game_logs', ['guild_id'], unique=False)
    op.drop_index(op.f('ix_shops_guild_id'), table_name='shops')
    op.drop_index('idx_shop_guild_id', table_name='shops')
    op.drop_table('shops')
    op.drop_index(op.f('ix_crafting_recipes_guild_id'), table_name='crafting_recipes')
    op.drop_index('idx_craftingrecipe_guild_skill', table_name='crafting_recipes')
    op.drop_index('idx_craftingrecipe_guild_output_item', table_name='crafting_recipes')
    op.drop_table('crafting_recipes')
    op.drop_index(op.f('ix_quests_guild_id'), table_name='quests')
    op.drop_index('idx_quests_guild_id', table_name='quests')
    op.drop_table('quests')
    op.drop_index(op.f('ix_currencies_guild_id'), table_name='currencies')
    op.drop_index('idx_currency_guild_id', table_name='currencies')
    op.drop_table('currencies')
    # ### end Alembic commands ###
