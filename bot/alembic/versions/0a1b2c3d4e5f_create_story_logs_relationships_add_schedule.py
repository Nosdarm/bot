"""Add StoryLog, Relationship tables and NPC.schedule_json column

Revision ID: 0a1b2c3d4e5f
Revises: ad464255a42c
Create Date: YYYY-MM-DD HH:MM:SS.MS

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # If using JSONB specifically for PostgreSQL

# revision identifiers, used by Alembic.
revision = '0a1b2c3d4e5f' # Updated
down_revision = 'ad464255a42c' # Kept from original placeholder file
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create story_logs table
    op.create_table('story_logs',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('location_id', sa.String(), nullable=True),
        sa.Column('event_type', sa.String(), nullable=False),
        sa.Column('entity_ids_json', postgresql.JSONB(), nullable=True, comment='Stores IDs of entities involved, e.g., {"character_ids": [], "npc_ids": [], "item_ids": []}'),
        sa.Column('details_json', postgresql.JSONB(), nullable=True, comment='Stores detailed, structured information about the event'),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_story_logs_guild_id'), 'story_logs', ['guild_id'], unique=False)
    op.create_index(op.f('ix_story_logs_timestamp'), 'story_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_story_logs_location_id'), 'story_logs', ['location_id'], unique=False)
    op.create_index(op.f('ix_story_logs_event_type'), 'story_logs', ['event_type'], unique=False)
    op.create_index('idx_storylog_guild_timestamp', 'story_logs', ['guild_id', 'timestamp'], unique=False)
    op.create_index('idx_storylog_guild_event_type', 'story_logs', ['guild_id', 'event_type'], unique=False)

    op.drop_table('relationships', if_exists=True) # This was in the original, implies it might have existed before or is for idempotency
    # Create relationships table
    op.create_table('relationships',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('entity1_type', sa.String(), nullable=False),
        sa.Column('entity1_id', sa.String(), nullable=False),
        sa.Column('entity2_type', sa.String(), nullable=False),
        sa.Column('entity2_id', sa.String(), nullable=False),
        sa.Column('type', sa.String(), nullable=False),
        sa.Column('value', sa.Integer(), nullable=False, server_default=sa.text('0')),
        sa.Column('source_log_id', sa.String(), nullable=True),
        sa.Column('details_json', postgresql.JSONB(), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['source_log_id'], ['story_logs.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('guild_id', 'entity1_type', 'entity1_id', 'entity2_type', 'entity2_id', name='uq_relationship_between_entities')
    )
    op.create_index(op.f('ix_relationships_guild_id'), 'relationships', ['guild_id'], unique=False)
    op.create_index(op.f('ix_relationships_entity1_type'), 'relationships', ['entity1_type'], unique=False)
    op.create_index(op.f('ix_relationships_entity1_id'), 'relationships', ['entity1_id'], unique=False)
    op.create_index(op.f('ix_relationships_entity2_type'), 'relationships', ['entity2_type'], unique=False)
    op.create_index(op.f('ix_relationships_entity2_id'), 'relationships', ['entity2_id'], unique=False)
    op.create_index(op.f('ix_relationships_type'), 'relationships', ['type'], unique=False)
    op.create_index(op.f('ix_relationships_source_log_id'), 'relationships', ['source_log_id'], unique=False)
    op.create_index('idx_relationship_guild_entity1', 'relationships', ['guild_id', 'entity1_type', 'entity1_id'], unique=False)
    op.create_index('idx_relationship_guild_entity2', 'relationships', ['guild_id', 'entity2_type', 'entity2_id'], unique=False)
    op.create_index('idx_relationship_guild_type', 'relationships', ['guild_id', 'type'], unique=False)

    # Add schedule_json column to npcs table
    op.add_column('npcs', sa.Column('schedule_json', postgresql.JSONB(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('npcs', 'schedule_json')

    op.drop_index('idx_relationship_guild_type', table_name='relationships')
    op.drop_index('idx_relationship_guild_entity2', table_name='relationships')
    op.drop_index('idx_relationship_guild_entity1', table_name='relationships')
    op.drop_index(op.f('ix_relationships_source_log_id'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_type'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_entity2_id'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_entity2_type'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_entity1_id'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_entity1_type'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_guild_id'), table_name='relationships')
    op.drop_table('relationships')

    op.drop_index('idx_storylog_guild_event_type', table_name='story_logs')
    op.drop_index('idx_storylog_guild_timestamp', table_name='story_logs')
    op.drop_index(op.f('ix_story_logs_event_type'), table_name='story_logs')
    op.drop_index(op.f('ix_story_logs_location_id'), table_name='story_logs')
    op.drop_index(op.f('ix_story_logs_timestamp'), table_name='story_logs')
    op.drop_index(op.f('ix_story_logs_guild_id'), table_name='story_logs')
    op.drop_table('story_logs')
    # ### end Alembic commands ###
