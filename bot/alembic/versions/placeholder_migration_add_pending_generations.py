"""Create pending_generations table

Revision ID: XXXXXXXXXXXX  # Placeholder for new revision ID for this specific migration
Revises: YYYYYYYYYYYY  # Placeholder: Should be the ID of the migration that added StoryLog, Relationship, NPC.schedule
Create Date: ZZZZ-ZZ-ZZ ZZ:ZZ:ZZ.ZZZZZZ

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'XXXXXXXXXXXX' # Placeholder
down_revision = 'YYYYYYYYYYYY' # Placeholder: This should point to the previous migration's ID
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Enum types for PostgreSQL. If not using native PG ENUMs, SAEnum will handle string storage.
    # The SAEnum(..., name="...") in the Column definition typically handles creation for supported backends.
    # Explicit creation might be needed if `create_type=False` was used in model or for shared enums.
    # For this migration, we rely on SQLAlchemy's default behavior for SAEnum.

    op.create_table('pending_generations',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('request_type', sa.Enum('LOCATION_DESCRIPTION', 'LOCATION_DETAILS', 'NPC_PROFILE', 'QUEST_IDEATION', 'QUEST_FULL', 'ITEM_PROFILE', 'FACTION_PROFILE', 'LORE_ENTRY', 'DIALOGUE_LINE', 'EVENT_DESCRIPTION', 'CUSTOM_PROMPT', name='generation_type_enum'), nullable=False),
        sa.Column('request_params_json', postgresql.JSONB(), nullable=True),
        sa.Column('raw_ai_output_text', sa.Text(), nullable=True),
        sa.Column('parsed_data_json', postgresql.JSONB(), nullable=True),
        sa.Column('validation_issues_json', postgresql.JSONB(), nullable=True),
        sa.Column('status', sa.Enum('PENDING_GENERATION', 'PENDING_VALIDATION', 'FAILED_VALIDATION', 'PENDING_MODERATION', 'APPROVED', 'REJECTED', 'APPLIED', 'APPLICATION_FAILED', 'ARCHIVED', name='pending_status_enum'), nullable=False),
        sa.Column('created_by_user_id', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('moderated_by_user_id', sa.String(), nullable=True),
        sa.Column('moderated_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('moderator_notes', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], name=op.f('fk_pending_generations_guild_id_guild_configs'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_pending_generations'))
    )
    op.create_index(op.f('ix_pending_generations_created_by_user_id'), 'pending_generations', ['created_by_user_id'], unique=False)
    op.create_index(op.f('ix_pending_generations_guild_id'), 'pending_generations', ['guild_id'], unique=False)
    op.create_index(op.f('ix_pending_generations_request_type'), 'pending_generations', ['request_type'], unique=False)
    op.create_index(op.f('ix_pending_generations_status'), 'pending_generations', ['status'], unique=False)
    op.create_index('idx_pending_generation_guild_status_type', 'pending_generations', ['guild_id', 'status', 'request_type'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_pending_generation_guild_status_type', table_name='pending_generations')
    op.drop_index(op.f('ix_pending_generations_status'), table_name='pending_generations')
    op.drop_index(op.f('ix_pending_generations_request_type'), table_name='pending_generations')
    op.drop_index(op.f('ix_pending_generations_guild_id'), table_name='pending_generations')
    op.drop_index(op.f('ix_pending_generations_created_by_user_id'), table_name='pending_generations')
    op.drop_table('pending_generations')

    # Drop the enums if they were created as native PostgreSQL ENUM types by SAEnum with naming.
    # This ensures cleanup if the database supports native ENUMs and SQLAlchemy created them.
    # The checkfirst=False is important if the types might be used by other tables not dropped in this migration.
    # However, if these enums are exclusive to this table, checkfirst=True (default) is safer.
    # For this specific case, assuming they are specific to this table for now.
    bind = op.get_bind()
    if bind.dialect.name == 'postgresql': # Only for PostgreSQL
        sa.Enum(name='generation_type_enum').drop(bind, checkfirst=True)
        sa.Enum(name='pending_status_enum').drop(bind, checkfirst=True)
    # ### end Alembic commands ###
