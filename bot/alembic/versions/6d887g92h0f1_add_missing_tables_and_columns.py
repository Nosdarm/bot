"""Add missing tables and columns

Revision ID: 6d887g92h0f1
Revises: 5c3a0b7555c0
Create Date: YYYY-MM-DD HH:MM:SS.MS

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # For JSONB

# revision identifiers, used by Alembic.
revision = '6d887g92h0f1'
down_revision = '5c3a0b7555c0'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Create item_templates table
    op.create_table('item_templates',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('type', sa.String(), nullable=True),
        sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=True), # Allowing global (NULL) and guild-specific
        sa.PrimaryKeyConstraint('id')
    )

    # Alter players table
    # Ensure batch mode for SQLite compatibility if it were used, but PostgreSQL handles this fine.
    with op.batch_alter_table('players', schema=None) as batch_op:
        batch_op.alter_column('discord_id', new_column_name='discord_user_id', existing_type=sa.Integer())

    # Alter locations table
    with op.batch_alter_table('locations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('template_id', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        # descriptions_i18n (plural) is assumed to exist from 5c3a0b7555c0 and is JSONB.
        # If it was JSON in SQLite and needs to be JSONB in PG, that's a type alteration.
        # For now, assuming it's compatible or was already JSONB.

    # Alter generated_npcs table
    with op.batch_alter_table('generated_npcs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('guild_id', sa.String(), nullable=True)) # Made nullable=True for safety
        batch_op.add_column(sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('role_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('personality_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('motivation_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('backstory_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('dialogue_hints_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('stats_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('skills_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('abilities_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('spells_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('inventory_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('faction_affiliations_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('relationships_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('current_location_id', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('is_hostile', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('ai_prompt_context_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.drop_column('placeholder')

    # Create pending_conflicts table
    op.create_table('pending_conflicts',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('conflict_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.func.now(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )

    # Create guild_settings table
    op.create_table('guild_settings',
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('key', sa.String(), nullable=False),
        sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.PrimaryKeyConstraint('guild_id', 'key')
    )

    # Alter 'logs' table (rename to 'game_logs' and add columns)
    op.rename_table('logs', 'game_logs')
    with op.batch_alter_table('game_logs', schema=None) as batch_op:
        batch_op.alter_column('id', new_column_name='log_id', existing_type=sa.String())
        batch_op.add_column(sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.func.now(), nullable=False))
        batch_op.add_column(sa.Column('guild_id', sa.String(), nullable=False, server_default="unknown_guild")) # temp default
        batch_op.add_column(sa.Column('channel_id', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('player_id', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('event_type', sa.String(), nullable=False, server_default="unknown_event")) # temp default
        batch_op.add_column(sa.Column('message', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('related_entities', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('is_undone', sa.Boolean(), nullable=False, server_default=sa.false()))
        batch_op.drop_column('placeholder')
    # Remove server_default after data backfill if necessary, for columns that shouldn't have defaults long-term
    # For now, making guild_id and event_type non-nullable with a default. If they can be truly null, adjust nullable=True.


    # Create dialogues table
    op.create_table('dialogues',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('participants', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('channel_id', sa.String(), nullable=True),
        sa.Column('conversation_history', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True, default=True), # Default for Booleans
        sa.Column('last_activity_game_time', sa.TIMESTAMP(), nullable=True),
        sa.Column('current_stage_id', sa.String(), nullable=True),
        sa.Column('template_id', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    # Alter inventory table
    with op.batch_alter_table('inventory', schema=None) as batch_op:
        batch_op.alter_column('id', new_column_name='inventory_id', existing_type=sa.String())
        batch_op.add_column(sa.Column('item_template_id', sa.String(), nullable=False, server_default="unknown_template")) # temp default
        # If item_template_id should be a FK:
        # batch_op.create_foreign_key('fk_inventory_item_template_id', 'item_templates', ['item_template_id'], ['id'])


    # Create pending_moderation_requests table
    op.create_table('pending_moderation_requests',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('user_id', sa.String(), nullable=False),
        sa.Column('content_type', sa.String(), nullable=False),
        sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('status', sa.String(), nullable=False, default='pending'),
        sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.func.now(), nullable=False),
        sa.Column('moderator_id', sa.String(), nullable=True),
        sa.Column('moderated_at', sa.TIMESTAMP(), nullable=True),
        sa.Column('moderator_notes', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    # Alter generated_locations table
    with op.batch_alter_table('generated_locations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('guild_id', sa.String(), nullable=False, server_default="unknown_guild")) # temp default
        batch_op.add_column(sa.Column('user_id', sa.String(), nullable=False, server_default="unknown_user")) # temp default
        batch_op.add_column(sa.Column('generated_at', sa.TIMESTAMP(), server_default=sa.func.now(), nullable=False))
        batch_op.drop_column('placeholder')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Downgrade generated_locations table
    with op.batch_alter_table('generated_locations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('placeholder', sa.String(length=50), nullable=True))
        batch_op.drop_column('generated_at')
        batch_op.drop_column('user_id')
        batch_op.drop_column('guild_id')

    # Drop pending_moderation_requests table
    op.drop_table('pending_moderation_requests')

    # Downgrade inventory table
    with op.batch_alter_table('inventory', schema=None) as batch_op:
        # batch_op.drop_constraint('fk_inventory_item_template_id', type_='foreignkey') # If FK was created
        batch_op.drop_column('item_template_id')
        batch_op.alter_column('inventory_id', new_column_name='id', existing_type=sa.String())


    # Drop dialogues table
    op.drop_table('dialogues')

    # Downgrade game_logs table (rename back to logs and remove columns)
    with op.batch_alter_table('game_logs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('placeholder', sa.String(length=50), nullable=True))
        batch_op.drop_column('is_undone')
        batch_op.drop_column('context_data')
        batch_op.drop_column('related_entities')
        batch_op.drop_column('message')
        batch_op.drop_column('event_type')
        batch_op.drop_column('player_id')
        batch_op.drop_column('channel_id')
        batch_op.drop_column('guild_id')
        batch_op.drop_column('timestamp')
        batch_op.alter_column('log_id', new_column_name='id', existing_type=sa.String())
    op.rename_table('game_logs', 'logs')


    # Drop guild_settings table
    op.drop_table('guild_settings')

    # Drop pending_conflicts table
    op.drop_table('pending_conflicts')

    # Downgrade generated_npcs table
    with op.batch_alter_table('generated_npcs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('placeholder', sa.String(length=50), nullable=True))
        batch_op.drop_column('ai_prompt_context_json')
        batch_op.drop_column('is_hostile')
        batch_op.drop_column('current_location_id')
        batch_op.drop_column('relationships_json')
        batch_op.drop_column('faction_affiliations_json')
        batch_op.drop_column('inventory_json')
        batch_op.drop_column('spells_json')
        batch_op.drop_column('abilities_json')
        batch_op.drop_column('skills_json')
        batch_op.drop_column('stats_json')
        batch_op.drop_column('dialogue_hints_i18n')
        batch_op.drop_column('backstory_i18n')
        batch_op.drop_column('motivation_i18n')
        batch_op.drop_column('personality_i18n')
        batch_op.drop_column('role_i18n')
        batch_op.drop_column('name_i18n')
        batch_op.drop_column('guild_id')

    # Downgrade locations table
    with op.batch_alter_table('locations', schema=None) as batch_op:
        batch_op.drop_column('name_i18n')
        batch_op.drop_column('template_id')

    # Downgrade players table
    with op.batch_alter_table('players', schema=None) as batch_op:
        batch_op.alter_column('discord_user_id', new_column_name='discord_id', existing_type=sa.Integer())

    # Drop item_templates table
    op.drop_table('item_templates')
    # ### end Alembic commands ###
