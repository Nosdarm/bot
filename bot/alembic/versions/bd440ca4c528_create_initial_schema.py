"""create_initial_schema

Revision ID: bd440ca4c528
Revises:
Create Date: 2025-06-22 21:13:18.984095

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bd440ca4c528'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('global_state',
        sa.Column('key', sa.String(), nullable=False),
        sa.Column('value', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('key')
    )

    op.create_table('guild_configs',
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('bot_language', sa.String(), nullable=False),
        sa.Column('game_channel_id', sa.String(), nullable=True),
        sa.Column('master_channel_id', sa.String(), nullable=True),
        sa.Column('system_channel_id', sa.String(), nullable=True),
        sa.Column('notification_channel_id', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('guild_id')
    )
    op.create_index(op.f('ix_guild_configs_guild_id'), 'guild_configs', ['guild_id'], unique=False)

    op.create_table('new_items',
        sa.Column('id', postgresql.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('item_type', sa.String(), nullable=False),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
        sa.UniqueConstraint('name', name='uq_new_item_name')
    )

    op.create_table('rpg_characters',
        sa.Column('id', postgresql.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('class_name', sa.String(), nullable=False),
        sa.Column('level', sa.Integer(), nullable=False),
        sa.Column('health', sa.Integer(), nullable=False),
        sa.Column('mana', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.CheckConstraint('health >= 0', name='check_health_non_negative'),
        sa.CheckConstraint('level >= 0', name='check_level_non_negative'),
        sa.CheckConstraint('mana >= 0', name='check_mana_non_negative'),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('abilities',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('effect_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('cost', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('type_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ability_guild_id', 'abilities', ['guild_id'], unique=False)
    op.create_index(op.f('ix_abilities_guild_id'), 'abilities', ['guild_id'], unique=False)

    op.create_table('currencies',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', sa.JSON(), nullable=False),
        sa.Column('symbol_i18n', sa.JSON(), nullable=True),
        sa.Column('exchange_rate_to_standard', sa.Float(), nullable=False),
        sa.Column('is_default', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_currency_guild_id', 'currencies', ['guild_id'], unique=False)
    op.create_index(op.f('ix_currencies_guild_id'), 'currencies', ['guild_id'], unique=False)

    op.create_table('crafting_queues',
        sa.Column('entity_id', sa.String(), nullable=False),
        sa.Column('entity_type', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('queue', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('entity_id', 'entity_type', 'guild_id')
    )
    op.create_index(op.f('ix_crafting_queues_guild_id'), 'crafting_queues', ['guild_id'], unique=False)

    op.create_table('events',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('template_id', sa.String(), nullable=True),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('channel_id', sa.String(), nullable=True),
        sa.Column('current_stage_id', sa.String(), nullable=True),
        sa.Column('players', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('stages_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('end_message_template_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_events_guild_id'), 'events', ['guild_id'], unique=False)

    op.create_table('generated_factions',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('ideology_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('leader_concept_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('resource_notes_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('ai_metadata_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Stores metadata from AI generation, like prompt details or model version'),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_generatedfaction_guild_id', 'generated_factions', ['guild_id'], unique=False)
    op.create_index(op.f('ix_generated_factions_guild_id'), 'generated_factions', ['guild_id'], unique=False)

    op.create_table('generated_locations',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('descriptions_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('details_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('tags_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('atmosphere_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('features_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_generatedlocation_guild_id', 'generated_locations', ['guild_id'], unique=False)
    op.create_index(op.f('ix_generated_locations_guild_id'), 'generated_locations', ['guild_id'], unique=False)

    op.create_table('generated_npcs',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('backstory_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('persona_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('effective_stats_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_generatednpc_guild_id', 'generated_npcs', ['guild_id'], unique=False)
    op.create_index(op.f('ix_generated_npcs_guild_id'), 'generated_npcs', ['guild_id'], unique=False)

    op.create_table('item_properties',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_itemproperty_guild_id', 'item_properties', ['guild_id'], unique=False)
    op.create_index(op.f('ix_item_properties_guild_id'), 'item_properties', ['guild_id'], unique=False)

    op.create_table('item_templates',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('type', sa.String(), nullable=True),
        sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_itemtemplate_guild_id', 'item_templates', ['guild_id'], unique=False)
    op.create_index(op.f('ix_item_templates_guild_id'), 'item_templates', ['guild_id'], unique=False)

    op.create_table('location_templates',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_location_templates_guild_id'), 'location_templates', ['guild_id'], unique=False)

    op.create_table('locations',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('static_id', sa.String(), nullable=True),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('descriptions_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('type_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('coordinates', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('neighbor_locations_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Stores a list of connection objects, e.g., [{'to_location_id': 'id1', 'path_description_i18n': {'en': 'a path'}, 'travel_time_hours': 1}]"),
        sa.Column('inventory', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('npc_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('event_triggers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('template_id', sa.String(), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('details_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('tags_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('atmosphere_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('features_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('channel_id', sa.String(), nullable=True),
        sa.Column('image_url', sa.String(), nullable=True),
        sa.Column('ai_metadata_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Stores metadata for AI generation purposes'),
        sa.Column('points_of_interest_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of Points of Interest objects/dictionaries'),
        sa.Column('on_enter_events_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['template_id'], ['location_templates.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('guild_id', 'static_id', name='uq_location_guild_static_id')
    )
    op.create_index(op.f('ix_locations_guild_id'), 'locations', ['guild_id'], unique=False)
    op.create_index(op.f('ix_locations_static_id'), 'locations', ['static_id'], unique=False)

    op.create_table('pending_conflicts',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('conflict_data_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('resolution_data_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('resolved_at', sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_pending_conflicts_guild_id'), 'pending_conflicts', ['guild_id'], unique=False)
    op.create_index(op.f('ix_pending_conflicts_status'), 'pending_conflicts', ['status'], unique=False)

    op.create_table('pending_generations',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('request_type', sa.String(), nullable=False),
        sa.Column('request_params_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('raw_ai_output_text', sa.Text(), nullable=True),
        sa.Column('parsed_data_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('validation_issues_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('created_by_user_id', sa.String(), nullable=True),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('moderated_by_user_id', sa.String(), nullable=True),
        sa.Column('moderated_at', sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column('moderator_notes_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_pendinggeneration_guild_status', 'pending_generations', ['guild_id', 'status'], unique=False)
    op.create_index(op.f('ix_pending_generations_guild_id'), 'pending_generations', ['guild_id'], unique=False)
    op.create_index(op.f('ix_pending_generations_request_type'), 'pending_generations', ['request_type'], unique=False)
    op.create_index(op.f('ix_pending_generations_status'), 'pending_generations', ['status'], unique=False)

    op.create_table('players',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('discord_id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('selected_language', sa.String(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('active_character_id', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('discord_id', 'guild_id', name='uq_player_discord_guild')
    )
    op.create_index('idx_player_guild_discord', 'players', ['guild_id', 'discord_id'], unique=False)
    op.create_index(op.f('ix_players_active_character_id'), 'players', ['active_character_id'], unique=False)
    op.create_index(op.f('ix_players_discord_id'), 'players', ['discord_id'], unique=False)
    op.create_index(op.f('ix_players_guild_id'), 'players', ['guild_id'], unique=False)
    op.create_index(op.f('ix_players_is_active'), 'players', ['is_active'], unique=False)

    op.create_table('questlines',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_questline_guild_id', 'questlines', ['guild_id'], unique=False)
    op.create_index(op.f('ix_questlines_guild_id'), 'questlines', ['guild_id'], unique=False)

    op.create_table('rules_config',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('key', sa.String(), nullable=False),
        sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('guild_id', 'key', name='uq_guild_rule_key')
    )
    op.create_index('idx_rulesconfig_guild_key', 'rules_config', ['guild_id', 'key'], unique=False)
    op.create_index(op.f('ix_rules_config_guild_id'), 'rules_config', ['guild_id'], unique=False)
    op.create_index(op.f('ix_rules_config_key'), 'rules_config', ['key'], unique=False)

    op.create_table('skills',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_skill_guild_id', 'skills', ['guild_id'], unique=False)
    op.create_index(op.f('ix_skills_guild_id'), 'skills', ['guild_id'], unique=False)

    op.create_table('spells',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('effect_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('cost', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('type_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_spell_guild_id', 'spells', ['guild_id'], unique=False)
    op.create_index(op.f('ix_spells_guild_id'), 'spells', ['guild_id'], unique=False)

    op.create_table('statuses',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('status_type', sa.String(), nullable=False),
        sa.Column('target_id', sa.String(), nullable=False),
        sa.Column('target_type', sa.String(), nullable=False),
        sa.Column('duration_turns', sa.Float(), nullable=True),
        sa.Column('applied_at', sa.Float(), nullable=True),
        sa.Column('source_id', sa.String(), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('effects', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_statuses_guild_id'), 'statuses', ['guild_id'], unique=False)

    op.create_table('timers',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('type', sa.String(), nullable=False),
        sa.Column('ends_at', sa.Float(), nullable=False),
        sa.Column('callback_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_timers_guild_id'), 'timers', ['guild_id'], unique=False)

    op.create_table('world_states',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('global_narrative_state_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('current_era_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('custom_flags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_world_states_guild_id'), 'world_states', ['guild_id'], unique=True)

    op.create_table('characters',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('player_id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('character_class_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('race_key', sa.String(), nullable=True),
        sa.Column('race_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('level', sa.Integer(), nullable=False),
        sa.Column('xp', sa.Integer(), nullable=False),
        sa.Column('unspent_xp', sa.Integer(), nullable=False),
        sa.Column('gold', sa.Integer(), nullable=False),
        sa.Column('current_hp', sa.Float(), nullable=True),
        sa.Column('max_hp', sa.Float(), nullable=True),
        sa.Column('mp', sa.Integer(), nullable=True),
        sa.Column('base_attack', sa.Integer(), nullable=True),
        sa.Column('base_defense', sa.Integer(), nullable=True),
        sa.Column('is_alive', sa.Boolean(), nullable=False),
        sa.Column('stats_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('effective_stats_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('status_effects_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('skills_data_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('abilities_data_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('spells_data_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('known_spells_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('spell_cooldowns_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('inventory_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('equipment_slots_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('active_quests_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('flags_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('state_variables_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('current_game_status', sa.String(), nullable=True),
        sa.Column('current_action_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('action_queue_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('collected_actions_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('current_location_id', sa.String(), nullable=True),
        sa.Column('current_party_id', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['current_location_id'], ['locations.id'], ),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_character_guild_player', 'characters', ['guild_id', 'player_id'], unique=False)
    op.create_index('idx_character_location', 'characters', ['current_location_id'], unique=False)
    op.create_index(op.f('ix_characters_current_location_id'), 'characters', ['current_location_id'], unique=False)
    op.create_index(op.f('ix_characters_guild_id'), 'characters', ['guild_id'], unique=False)
    op.create_index(op.f('ix_characters_player_id'), 'characters', ['player_id'], unique=False)

    op.create_foreign_key(
        'fk_player_active_character', 'players', 'characters',
        ['active_character_id'], ['id'], ondelete='SET NULL'
    )

    op.create_table('parties',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('player_ids_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('current_location_id', sa.String(), nullable=True),
        sa.Column('turn_status', sa.String(), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('leader_id', sa.String(), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('current_action', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['current_location_id'], ['locations.id'], ),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['leader_id'], ['characters.id'], name='fk_party_leader_character'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parties_guild_id'), 'parties', ['guild_id'], unique=False)

    op.create_foreign_key(
        'fk_character_current_party', 'characters', 'parties',
        ['current_party_id'], ['id']
    )
    op.create_index('idx_character_party', 'characters', ['current_party_id'], unique=False)
    op.create_index(op.f('ix_characters_current_party_id'), 'characters', ['current_party_id'], unique=False)

    op.create_table('new_character_items',
        sa.Column('id', postgresql.UUID(), nullable=False),
        sa.Column('character_id', sa.String(), nullable=False),
        sa.Column('item_id', postgresql.UUID(), nullable=False),
        sa.Column('quantity', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.CheckConstraint('quantity > 0', name='check_new_char_item_quantity_positive'),
        sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
        sa.ForeignKeyConstraint(['item_id'], ['new_items.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_new_character_items_character_id'), 'new_character_items', ['character_id'], unique=False)
    op.create_index(op.f('ix_new_character_items_item_id'), 'new_character_items', ['item_id'], unique=False)

    op.create_table('items',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('template_id', sa.String(), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('owner_id', sa.String(), nullable=True),
        sa.Column('owner_type', sa.String(), nullable=True),
        sa.Column('location_id', sa.String(), nullable=True),
        sa.Column('quantity', sa.Integer(), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('is_temporary', sa.Boolean(), nullable=True),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('slot', sa.String(), nullable=True),
        sa.Column('value', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
        sa.ForeignKeyConstraint(['template_id'], ['item_templates.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_item_guild_id', 'items', ['guild_id'], unique=False)
    op.create_index(op.f('ix_items_guild_id'), 'items', ['guild_id'], unique=False)

    op.create_table('npcs',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('template_id', sa.String(), nullable=True),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('backstory_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('persona_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('location_id', sa.String(), nullable=True),
        sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('inventory', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('current_action', sa.String(), nullable=True),
        sa.Column('action_queue', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('party_id', sa.String(), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('health', sa.Float(), nullable=True),
        sa.Column('max_health', sa.Float(), nullable=True),
        sa.Column('is_alive', sa.Boolean(), nullable=False),
        sa.Column('status_effects', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('is_temporary', sa.Boolean(), nullable=False),
        sa.Column('archetype', sa.String(), nullable=True),
        sa.Column('traits', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('desires', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('motives', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('skills_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('equipment_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('abilities_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('faction', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('behavior_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('loot_table_id', sa.String(), nullable=True),
        sa.Column('effective_stats_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('faction_id', sa.String(), nullable=True),
        sa.Column('schedule_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
        sa.ForeignKeyConstraint(['party_id'], ['parties.id'], ),
        sa.ForeignKeyConstraint(['faction_id'], ['generated_factions.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_npcs_faction_id'), 'npcs', ['faction_id'], unique=False)
    op.create_index(op.f('ix_npcs_guild_id'), 'npcs', ['guild_id'], unique=False)

    op.create_table('story_logs',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('location_id', sa.String(), nullable=True),
        sa.Column('event_type', sa.String(), nullable=False),
        sa.Column('entity_ids_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Stores IDs of entities involved, e.g., {"character_ids": [], "npc_ids": [], "item_ids": []}'),
        sa.Column('details_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Stores detailed, structured information about the event'),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_storylog_guild_event_type', 'story_logs', ['guild_id', 'event_type'], unique=False)
    op.create_index('idx_storylog_guild_timestamp', 'story_logs', ['guild_id', 'timestamp'], unique=False)
    op.create_index(op.f('ix_story_logs_event_type'), 'story_logs', ['event_type'], unique=False)
    op.create_index(op.f('ix_story_logs_guild_id'), 'story_logs', ['guild_id'], unique=False)
    op.create_index(op.f('ix_story_logs_location_id'), 'story_logs', ['location_id'], unique=False)
    op.create_index(op.f('ix_story_logs_timestamp'), 'story_logs', ['timestamp'], unique=False)

    op.create_table('user_settings',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('language_code', sa.String(length=10), nullable=True),
        sa.Column('timezone', sa.String(length=50), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id', 'guild_id'], ['players.discord_id', 'players.guild_id'], name='fk_user_settings_player_discord_guild', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'guild_id', name='uq_user_guild_settings')
    )
    op.create_index('idx_user_settings_user_guild', 'user_settings', ['user_id', 'guild_id'], unique=False)
    op.create_index(op.f('ix_user_settings_guild_id'), 'user_settings', ['guild_id'], unique=False)

    # ================================================================================
    # START INSERTED BLOCK FOR generated_quests
    # ================================================================================
    op.create_table('generated_quests',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('title_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('status', sa.String(), nullable=True),
        sa.Column('suggested_level', sa.Integer(), nullable=True),
        sa.Column('rewards_json', sa.Text(), nullable=True),
        sa.Column('prerequisites_json', sa.Text(), nullable=True),
        sa.Column('consequences_json', sa.Text(), nullable=True),
        sa.Column('quest_giver_npc_id', sa.String(), nullable=True),
        sa.Column('ai_prompt_context_json', sa.Text(), nullable=True),
        sa.Column('quest_giver_details_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('consequences_summary_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_generatedquest_guild_id', 'generated_quests', ['guild_id'], unique=False)
    op.create_index(op.f('ix_generated_quests_guild_id'), 'generated_quests', ['guild_id'], unique=False)
    # ================================================================================
    # END INSERTED BLOCK FOR generated_quests
    # ================================================================================

    op.create_table('inventory',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('player_id', sa.String(), nullable=False),
        sa.Column('item_id', sa.String(), nullable=False),
        sa.Column('quantity', sa.Integer(), nullable=True),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['item_id'], ['items.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('player_id', 'item_id', name='uq_player_item_inventory')
    )
    op.create_index('idx_inventory_guild_player', 'inventory', ['guild_id', 'player_id'], unique=False)
    op.create_index(op.f('ix_inventory_guild_id'), 'inventory', ['guild_id'], unique=False)
    op.create_index(op.f('ix_inventory_item_id'), 'inventory', ['item_id'], unique=False)
    op.create_index(op.f('ix_inventory_player_id'), 'inventory', ['player_id'], unique=False)

    op.create_table('player_npc_memory',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('character_id', sa.String(), nullable=False),
        sa.Column('npc_id', sa.String(), nullable=False),
        sa.Column('memory_details_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['npc_id'], ['npcs.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('character_id', 'npc_id', 'guild_id', name='uq_char_npc_guild_memory')
    )
    op.create_index('idx_playernpcmemory_character_id', 'player_npc_memory', ['character_id'], unique=False)
    op.create_index('idx_playernpcmemory_guild_char_npc', 'player_npc_memory', ['guild_id', 'character_id', 'npc_id'], unique=False)
    op.create_index('idx_playernpcmemory_npc_id', 'player_npc_memory', ['npc_id'], unique=False)
    op.create_index(op.f('ix_player_npc_memory_character_id'), 'player_npc_memory', ['character_id'], unique=False)
    op.create_index(op.f('ix_player_npc_memory_guild_id'), 'player_npc_memory', ['guild_id'], unique=False)
    op.create_index(op.f('ix_player_npc_memory_npc_id'), 'player_npc_memory', ['npc_id'], unique=False)

    op.create_table('quest_steps',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('quest_id', sa.String(), nullable=False),
        sa.Column('title_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('requirements_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('required_mechanics_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('abstract_goal_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('conditions_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('consequences_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('step_order', sa.Integer(), nullable=False),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('assignee_type', sa.String(), nullable=True),
        sa.Column('assignee_id', sa.String(), nullable=True),
        sa.Column('linked_location_id', sa.String(), nullable=True),
        sa.Column('linked_npc_id', sa.String(), nullable=True),
        sa.Column('linked_item_id', sa.String(), nullable=True),
        sa.Column('linked_guild_event_id', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['linked_guild_event_id'], ['events.id'], ),
        sa.ForeignKeyConstraint(['linked_item_id'], ['items.id'], ),
        sa.ForeignKeyConstraint(['linked_location_id'], ['locations.id'], ),
        sa.ForeignKeyConstraint(['linked_npc_id'], ['npcs.id'], ),
        sa.ForeignKeyConstraint(['quest_id'], ['generated_quests.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_queststep_guild_quest', 'quest_steps', ['guild_id', 'quest_id'], unique=False)
    op.create_index(op.f('ix_quest_steps_guild_id'), 'quest_steps', ['guild_id'], unique=False)
    op.create_index(op.f('ix_quest_steps_quest_id'), 'quest_steps', ['quest_id'], unique=False)

    op.create_table('relationships',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('entity1_type', sa.String(), nullable=False),
        sa.Column('entity1_id', sa.String(), nullable=False),
        sa.Column('entity2_type', sa.String(), nullable=False),
        sa.Column('entity2_id', sa.String(), nullable=False),
        sa.Column('type', sa.String(), nullable=False),
        sa.Column('value', sa.Integer(), nullable=False),
        sa.Column('source_log_id', sa.String(), nullable=True),
        sa.Column('details_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['source_log_id'], ['story_logs.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('guild_id', 'entity1_type', 'entity1_id', 'entity2_type', 'entity2_id', name='uq_relationship_between_entities')
    )
    op.create_index('idx_relationship_guild_entity1', 'relationships', ['guild_id', 'entity1_type', 'entity1_id'], unique=False)
    op.create_index('idx_relationship_guild_entity2', 'relationships', ['guild_id', 'entity2_type', 'entity2_id'], unique=False)
    op.create_index('idx_relationship_guild_type', 'relationships', ['guild_id', 'type'], unique=False)
    op.create_index(op.f('ix_relationships_entity1_id'), 'relationships', ['entity1_id'], unique=False)
    op.create_index(op.f('ix_relationships_entity1_type'), 'relationships', ['entity1_type'], unique=False)
    op.create_index(op.f('ix_relationships_entity2_id'), 'relationships', ['entity2_id'], unique=False)
    op.create_index(op.f('ix_relationships_entity2_type'), 'relationships', ['entity2_type'], unique=False)
    op.create_index(op.f('ix_relationships_guild_id'), 'relationships', ['guild_id'], unique=False)
    op.create_index(op.f('ix_relationships_source_log_id'), 'relationships', ['source_log_id'], unique=False)
    op.create_index(op.f('ix_relationships_type'), 'relationships', ['type'], unique=False)

    op.create_table('shops',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', sa.JSON(), nullable=False),
        sa.Column('description_i18n', sa.JSON(), nullable=True),
        sa.Column('type_i18n', sa.JSON(), nullable=True),
        sa.Column('inventory', sa.JSON(), nullable=True),
        sa.Column('owner_id', sa.String(), nullable=True),
        sa.Column('location_id', sa.String(), nullable=True),
        sa.Column('economic_parameters_override', sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
        sa.ForeignKeyConstraint(['owner_id'], ['npcs.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_shop_guild_id', 'shops', ['guild_id'], unique=False)
    op.create_index(op.f('ix_shops_guild_id'), 'shops', ['guild_id'], unique=False)

    op.create_table('mobile_groups',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('current_location_id', sa.String(), nullable=True),
        sa.Column('member_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('destination_location_id', sa.String(), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['current_location_id'], ['locations.id'], ),
        sa.ForeignKeyConstraint(['destination_location_id'], ['locations.id'], ),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_mobilegroup_guild_id', 'mobile_groups', ['guild_id'], unique=False)
    op.create_index('idx_mobilegroup_is_active', 'mobile_groups', ['is_active'], unique=False)
    op.create_index(op.f('ix_mobile_groups_guild_id'), 'mobile_groups', ['guild_id'], unique=False)
    op.create_index(op.f('ix_mobile_groups_is_active'), 'mobile_groups', ['is_active'], unique=False)

    op.create_table('quests',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('influence_level', sa.String(), nullable=True),
        sa.Column('prerequisites_json_str', sa.Text(), nullable=True),
        sa.Column('connections_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('rewards_json_str', sa.Text(), nullable=True),
        sa.Column('npc_involvement_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('consequences_json_str', sa.Text(), nullable=True),
        sa.Column('quest_giver_details_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('consequences_summary_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('ai_prompt_context_json_str', sa.Text(), nullable=True),
        sa.Column('is_ai_generated', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_quests_guild_id', 'quests', ['guild_id'], unique=False)
    op.create_index(op.f('ix_quests_guild_id'), 'quests', ['guild_id'], unique=False)

    op.create_table('combats',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('location_id', sa.String(), nullable=False),
        sa.Column('status', sa.String(length=50), nullable=False),
        sa.Column('participants', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('initial_positions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('current_round', sa.Integer(), nullable=True),
        sa.Column('combat_log', sa.Text(), nullable=True),
        sa.Column('turn_log_structured', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('combat_rules_snapshot', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('channel_id', sa.String(), nullable=True),
        sa.Column('event_id', sa.String(), nullable=True),
        sa.Column('turn_order', sa.JSON(), nullable=True),
        sa.Column('current_turn_index', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['event_id'], ['events.id'], ),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_combats_guild_id'), 'combats', ['guild_id'], unique=False)
    op.create_index(op.f('ix_combats_status'), 'combats', ['status'], unique=False)

    op.create_table('crafting_recipes',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('ingredients_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('output_item_template_id', sa.String(), nullable=False),
        sa.Column('output_quantity', sa.Integer(), nullable=False),
        sa.Column('required_skill_id', sa.String(), nullable=True),
        sa.Column('required_skill_level', sa.Integer(), nullable=True),
        sa.Column('other_requirements_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('ai_metadata_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['output_item_template_id'], ['item_templates.id'], ),
        sa.ForeignKeyConstraint(['required_skill_id'], ['skills.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_craftingrecipe_guild_output_item', 'crafting_recipes', ['guild_id', 'output_item_template_id'], unique=False)
    op.create_index('idx_craftingrecipe_guild_skill', 'crafting_recipes', ['guild_id', 'required_skill_id'], unique=False)
    op.create_index(op.f('ix_crafting_recipes_guild_id'), 'crafting_recipes', ['guild_id'], unique=False)

    op.create_table('global_npcs',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('guild_id', sa.String(), nullable=False),
        sa.Column('name_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('description_i18n', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('current_location_id', sa.String(), nullable=True),
        sa.Column('npc_template_id', sa.String(), nullable=True),
        sa.Column('state_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('faction_id', sa.String(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['current_location_id'], ['locations.id'], ),
        sa.ForeignKeyConstraint(['faction_id'], ['generated_factions.id'], ),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.guild_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_globalnpc_faction_id', 'global_npcs', ['faction_id'], unique=False)
    op.create_index('idx_globalnpc_guild_id', 'global_npcs', ['guild_id'], unique=False)
    op.create_index('idx_globalnpc_is_active', 'global_npcs', ['is_active'], unique=False)
    op.create_index(op.f('ix_global_npcs_faction_id'), 'global_npcs', ['faction_id'], unique=False)
    op.create_index(op.f('ix_global_npcs_guild_id'), 'global_npcs', ['guild_id'], unique=False)
    op.create_index(op.f('ix_global_npcs_is_active'), 'global_npcs', ['is_active'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop in strict reverse order of creation in upgrade()

    op.drop_index(op.f('ix_global_npcs_is_active'), table_name='global_npcs')
    op.drop_index(op.f('ix_global_npcs_guild_id'), table_name='global_npcs')
    op.drop_index(op.f('ix_global_npcs_faction_id'), table_name='global_npcs')
    op.drop_index('idx_globalnpc_is_active', table_name='global_npcs')
    op.drop_index('idx_globalnpc_guild_id', table_name='global_npcs')
    op.drop_index('idx_globalnpc_faction_id', table_name='global_npcs')
    op.drop_table('global_npcs')

    op.drop_index(op.f('ix_crafting_recipes_guild_id'), table_name='crafting_recipes')
    op.drop_index('idx_craftingrecipe_guild_skill', table_name='crafting_recipes')
    op.drop_index('idx_craftingrecipe_guild_output_item', table_name='crafting_recipes')
    op.drop_table('crafting_recipes')

    op.drop_index(op.f('ix_combats_status'), table_name='combats')
    op.drop_index(op.f('ix_combats_guild_id'), table_name='combats')
    op.drop_table('combats')

    op.drop_index(op.f('ix_quests_guild_id'), table_name='quests')
    op.drop_index('idx_quests_guild_id', table_name='quests')
    op.drop_table('quests')

    op.drop_index(op.f('ix_mobile_groups_is_active'), table_name='mobile_groups')
    op.drop_index(op.f('ix_mobile_groups_guild_id'), table_name='mobile_groups')
    op.drop_index('idx_mobilegroup_is_active', table_name='mobile_groups')
    op.drop_index('idx_mobilegroup_guild_id', table_name='mobile_groups')
    op.drop_table('mobile_groups')

    op.drop_index(op.f('ix_shops_guild_id'), table_name='shops')
    op.drop_index('idx_shop_guild_id', table_name='shops')
    op.drop_table('shops')

    op.drop_index(op.f('ix_relationships_type'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_source_log_id'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_guild_id'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_entity2_type'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_entity2_id'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_entity1_type'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_entity1_id'), table_name='relationships')
    op.drop_index('idx_relationship_guild_type', table_name='relationships')
    op.drop_index('idx_relationship_guild_entity2', table_name='relationships')
    op.drop_index('idx_relationship_guild_entity1', table_name='relationships')
    op.drop_table('relationships')

    op.drop_index(op.f('ix_quest_steps_quest_id'), table_name='quest_steps')
    op.drop_index(op.f('ix_quest_steps_guild_id'), table_name='quest_steps')
    op.drop_index('idx_queststep_guild_quest', table_name='quest_steps')
    op.drop_table('quest_steps')

    op.drop_index(op.f('ix_player_npc_memory_npc_id'), table_name='player_npc_memory')
    op.drop_index(op.f('ix_player_npc_memory_guild_id'), table_name='player_npc_memory')
    op.drop_index(op.f('ix_player_npc_memory_character_id'), table_name='player_npc_memory')
    op.drop_index('idx_playernpcmemory_npc_id', table_name='player_npc_memory')
    op.drop_index('idx_playernpcmemory_guild_char_npc', table_name='player_npc_memory')
    op.drop_index('idx_playernpcmemory_character_id', table_name='player_npc_memory')
    op.drop_table('player_npc_memory')

    op.drop_index(op.f('ix_inventory_player_id'), table_name='inventory')
    op.drop_index(op.f('ix_inventory_item_id'), table_name='inventory')
    op.drop_index(op.f('ix_inventory_guild_id'), table_name='inventory')
    op.drop_index('idx_inventory_guild_player', table_name='inventory')
    op.drop_table('inventory')

    op.drop_index(op.f('ix_generated_quests_guild_id'), table_name='generated_quests')
    op.drop_index('idx_generatedquest_guild_id', table_name='generated_quests')
    op.drop_table('generated_quests')

    op.drop_index(op.f('ix_user_settings_guild_id'), table_name='user_settings')
    op.drop_index('idx_user_settings_user_guild', table_name='user_settings')
    op.drop_table('user_settings')

    op.drop_index(op.f('ix_story_logs_timestamp'), table_name='story_logs')
    op.drop_index(op.f('ix_story_logs_location_id'), table_name='story_logs')
    op.drop_index(op.f('ix_story_logs_guild_id'), table_name='story_logs')
    op.drop_index(op.f('ix_story_logs_event_type'), table_name='story_logs')
    op.drop_index('idx_storylog_guild_timestamp', table_name='story_logs')
    op.drop_index('idx_storylog_guild_event_type', table_name='story_logs')
    op.drop_table('story_logs')

    op.drop_index(op.f('ix_npcs_guild_id'), table_name='npcs')
    op.drop_index(op.f('ix_npcs_faction_id'), table_name='npcs')
    op.drop_table('npcs')

    op.drop_index(op.f('ix_items_guild_id'), table_name='items')
    op.drop_index('idx_item_guild_id', table_name='items')
    op.drop_table('items')

    op.drop_index(op.f('ix_new_character_items_item_id'), table_name='new_character_items')
    op.drop_index(op.f('ix_new_character_items_character_id'), table_name='new_character_items')
    op.drop_table('new_character_items')

    op.drop_constraint('fk_character_current_party', 'characters', type_='foreignkey')
    op.drop_index('idx_character_party', table_name='characters')
    op.drop_index(op.f('ix_characters_current_party_id'), table_name='characters')

    op.drop_index(op.f('ix_parties_guild_id'), table_name='parties')
    op.drop_table('parties')

    op.drop_constraint('fk_player_active_character', 'players', type_='foreignkey')

    op.drop_index(op.f('ix_characters_player_id'), table_name='characters')
    op.drop_index(op.f('ix_characters_guild_id'), table_name='characters')
    op.drop_index(op.f('ix_characters_current_location_id'), table_name='characters')
    op.drop_index('idx_character_location', table_name='characters')
    op.drop_index('idx_character_guild_player', table_name='characters')
    op.drop_table('characters')

    op.drop_index(op.f('ix_players_is_active'), table_name='players')
    op.drop_index(op.f('ix_players_guild_id'), table_name='players')
    op.drop_index(op.f('ix_players_discord_id'), table_name='players')
    op.drop_index(op.f('ix_players_active_character_id'), table_name='players')
    op.drop_index('idx_player_guild_discord', table_name='players')
    op.drop_table('players')

    op.drop_index(op.f('ix_world_states_guild_id'), table_name='world_states')
    op.drop_table('world_states')

    op.drop_index(op.f('ix_timers_guild_id'), table_name='timers')
    op.drop_table('timers')

    op.drop_index(op.f('ix_statuses_guild_id'), table_name='statuses')
    op.drop_table('statuses')

    op.drop_index(op.f('ix_spells_guild_id'), table_name='spells')
    op.drop_index('idx_spell_guild_id', table_name='spells')
    op.drop_table('spells')

    op.drop_index(op.f('ix_skills_guild_id'), table_name='skills')
    op.drop_index('idx_skill_guild_id', table_name='skills')
    op.drop_table('skills')

    op.drop_index(op.f('ix_rules_config_key'), table_name='rules_config')
    op.drop_index(op.f('ix_rules_config_guild_id'), table_name='rules_config')
    op.drop_index('idx_rulesconfig_guild_key', table_name='rules_config')
    op.drop_table('rules_config')

    op.drop_index(op.f('ix_questlines_guild_id'), table_name='questlines')
    op.drop_index('idx_questline_guild_id', table_name='questlines')
    op.drop_table('questlines')

    op.drop_index(op.f('ix_pending_generations_status'), table_name='pending_generations')
    op.drop_index(op.f('ix_pending_generations_request_type'), table_name='pending_generations')
    op.drop_index(op.f('ix_pending_generations_guild_id'), table_name='pending_generations')
    op.drop_index('idx_pendinggeneration_guild_status', table_name='pending_generations')
    op.drop_table('pending_generations')

    op.drop_index(op.f('ix_pending_conflicts_status'), table_name='pending_conflicts')
    op.drop_index(op.f('ix_pending_conflicts_guild_id'), table_name='pending_conflicts')
    op.drop_table('pending_conflicts')

    op.drop_index(op.f('ix_locations_static_id'), table_name='locations')
    op.drop_index(op.f('ix_locations_guild_id'), table_name='locations')
    op.drop_table('locations')

    op.drop_index(op.f('ix_location_templates_guild_id'), table_name='location_templates')
    op.drop_table('location_templates')

    op.drop_index(op.f('ix_item_templates_guild_id'), table_name='item_templates')
    op.drop_index('idx_itemtemplate_guild_id', table_name='item_templates')
    op.drop_table('item_templates')

    op.drop_index(op.f('ix_item_properties_guild_id'), table_name='item_properties')
    op.drop_index('idx_itemproperty_guild_id', table_name='item_properties')
    op.drop_table('item_properties')

    op.drop_index(op.f('ix_generated_npcs_guild_id'), table_name='generated_npcs')
    op.drop_index('idx_generatednpc_guild_id', table_name='generated_npcs')
    op.drop_table('generated_npcs')

    op.drop_index(op.f('ix_generated_locations_guild_id'), table_name='generated_locations')
    op.drop_index('idx_generatedlocation_guild_id', table_name='generated_locations')
    op.drop_table('generated_locations')

    op.drop_index(op.f('ix_generated_factions_guild_id'), table_name='generated_factions')
    op.drop_index('idx_generatedfaction_guild_id', table_name='generated_factions')
    op.drop_table('generated_factions')

    op.drop_index(op.f('ix_events_guild_id'), table_name='events')
    op.drop_table('events')

    op.drop_index(op.f('ix_crafting_queues_guild_id'), table_name='crafting_queues')
    op.drop_table('crafting_queues')

    op.drop_index(op.f('ix_currencies_guild_id'), table_name='currencies')
    op.drop_index('idx_currency_guild_id', table_name='currencies')
    op.drop_table('currencies')

    op.drop_index(op.f('ix_abilities_guild_id'), table_name='abilities')
    op.drop_index('idx_ability_guild_id', table_name='abilities')
    op.drop_table('abilities')

    op.drop_table('rpg_characters')
    op.drop_table('new_items')
    op.drop_index(op.f('ix_guild_configs_guild_id'), table_name='guild_configs')
    op.drop_table('guild_configs')
    op.drop_table('global_state')
    # ### end Alembic commands ###