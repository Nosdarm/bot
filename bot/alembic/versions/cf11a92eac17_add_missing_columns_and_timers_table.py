"""Add missing columns and timers table

Revision ID: cf11a92eac17
Revises: d715146611ba
Create Date: 2025-06-07 03:11:19.121440

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Added for existing_type if needed by batch alter

# revision identifiers, used by Alembic.
revision: str = 'cf11a92eac17'
down_revision: Union[str, None] = 'd715146611ba'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Helper functions to make operations idempotent
def table_exists(table_name, schema=None):
    conn = op.get_bind()
    return conn.dialect.has_table(conn, table_name, schema=schema)

def column_exists(table_name, column_name, schema=None):
    conn = op.get_bind()
    try:
        # For PostgreSQL, check information_schema
        if conn.dialect.name == 'postgresql':
            schema_condition = f" AND table_schema = '{schema}'" if schema else " AND table_schema = 'public'" # Default to public if no schema
            result = conn.execute(sa.text(
                f"SELECT 1 FROM information_schema.columns WHERE table_name='{table_name}' AND column_name='{column_name}'{schema_condition}"
            )).scalar_one_or_none()
            return result == 1
        # For SQLite and other dialects, use inspect
        else:
            insp = sa.inspect(conn)
            columns = insp.get_columns(table_name, schema=schema)
            return any(c['name'] == column_name for c in columns)
    except Exception as e:
        print(f"Error checking if column {column_name} exists in table {table_name}: {e}")
        return False


def upgrade() -> None:
    """Upgrade schema."""
    op.execute('DROP TABLE IF EXISTS _alembic_tmp_locations')

    # ### commands auto generated by Alembic - please adjust! ###
    if not column_exists('locations', 'template_id'):
        op.add_column('locations', sa.Column('template_id', sa.String(), nullable=True))

    with op.batch_alter_table('locations', schema=None) as batch_op:
        batch_op.alter_column('is_active',
                   existing_type=sa.BOOLEAN(),
                   server_default=None,
                   existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    op.execute('DROP TABLE IF EXISTS _alembic_tmp_locations')

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('locations', schema=None) as batch_op:
        batch_op.alter_column('is_active',
                   existing_type=sa.BOOLEAN(),
                   server_default=sa.text('true'), # Revert to previous server_default
                   existing_nullable=False)
        # The drop_column should also ideally be within batch for SQLite if it causes issues,
        # but standard op.drop_column is often fine if the column isn't involved in complex constraints.
        # If it becomes an issue, move it into the batch_op context.

    if column_exists('locations', 'template_id'):
        # op.drop_column('locations', 'template_id') # Original
        # For safety with SQLite, especially if constraints could be involved, batch mode is better.
        with op.batch_alter_table('locations', schema=None) as batch_op:
             batch_op.drop_column('template_id')
    # ### end Alembic commands ###
