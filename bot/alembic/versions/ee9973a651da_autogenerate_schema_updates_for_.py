"""autogenerate_schema_updates_for_locations_and_other_models

Revision ID: ee9973a651da
Revises: 909ad993a796
Create Date: 2025-06-07 00:20:05.349433

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ee9973a651da'
down_revision: Union[str, None] = '909ad993a796'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Clean up potential leftover temp tables
    op.execute('DROP TABLE IF EXISTS _alembic_tmp_inventory')
    op.execute('DROP TABLE IF EXISTS _alembic_tmp_item_templates')
    op.execute('DROP TABLE IF EXISTS _alembic_tmp_locations')

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('inventory', schema=None) as batch_op:
        batch_op.alter_column('id',
                   existing_type=sa.VARCHAR(),
                   server_default=None,
                   existing_nullable=False)

    with op.batch_alter_table('item_templates', schema=None) as batch_op:
        batch_op.alter_column('properties',
                   existing_type=postgresql.JSONB(astext_type=sa.Text()),
                   type_=sa.JSON(),
                   existing_nullable=True)

    with op.batch_alter_table('locations', schema=None) as batch_op:
        batch_op.alter_column('state_variables',
                   existing_type=postgresql.JSON(astext_type=sa.Text()), # In fcaa9d8b2630, this was changed to JSON.
                   type_=sa.JSON(), # Ensuring consistency if it's already JSON.
                   server_default=None,
                   existing_nullable=True)
        batch_op.alter_column('is_active',
                   existing_type=sa.BOOLEAN(),
                   server_default=None,
                   existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # Clean up potential leftover temp tables
    op.execute('DROP TABLE IF EXISTS _alembic_tmp_inventory')
    op.execute('DROP TABLE IF EXISTS _alembic_tmp_item_templates')
    op.execute('DROP TABLE IF EXISTS _alembic_tmp_locations')

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('locations', schema=None) as batch_op:
        batch_op.alter_column('is_active',
                   existing_type=sa.BOOLEAN(),
                   server_default=sa.text('true'),
                   existing_nullable=False)
        batch_op.alter_column('state_variables',
                   existing_type=sa.JSON(), # Keep as JSON, was changed in fcaa9d8b2630
                   type_=sa.JSON(), # Or change to postgresql.JSONB if absolutely necessary for downgrade
                   server_default=sa.text("'{}'::jsonb"),
                   existing_nullable=True)

    with op.batch_alter_table('item_templates', schema=None) as batch_op:
        batch_op.alter_column('properties',
                   existing_type=sa.JSON(),
                   type_=postgresql.JSONB(astext_type=sa.Text()),
                   existing_nullable=True)

    with op.batch_alter_table('inventory', schema=None) as batch_op:
        batch_op.alter_column('id',
                   existing_type=sa.VARCHAR(),
                   server_default=sa.text('gen_random_uuid()'),
                   existing_nullable=False)
    # ### end Alembic commands ###
